{
  "version": 3,
  "sources": ["../../lunr/lunr.js"],
  "sourcesContent": ["/**\r\n * lunr - http://lunrjs.com - A bit like Solr, but much smaller and not as bright - 2.3.9\r\n * Copyright (C) 2020 Oliver Nightingale\r\n * @license MIT\r\n */\r\n\r\n;(function(){\r\n\r\n/**\r\n * A convenience function for configuring and constructing\r\n * a new lunr Index.\r\n *\r\n * A lunr.Builder instance is created and the pipeline setup\r\n * with a trimmer, stop word filter and stemmer.\r\n *\r\n * This builder object is yielded to the configuration function\r\n * that is passed as a parameter, allowing the list of fields\r\n * and other builder parameters to be customised.\r\n *\r\n * All documents _must_ be added within the passed config function.\r\n *\r\n * @example\r\n * var idx = lunr(function () {\r\n *   this.field('title')\r\n *   this.field('body')\r\n *   this.ref('id')\r\n *\r\n *   documents.forEach(function (doc) {\r\n *     this.add(doc)\r\n *   }, this)\r\n * })\r\n *\r\n * @see {@link lunr.Builder}\r\n * @see {@link lunr.Pipeline}\r\n * @see {@link lunr.trimmer}\r\n * @see {@link lunr.stopWordFilter}\r\n * @see {@link lunr.stemmer}\r\n * @namespace {function} lunr\r\n */\r\nvar lunr = function (config) {\r\n  var builder = new lunr.Builder\r\n\r\n  builder.pipeline.add(\r\n    lunr.trimmer,\r\n    lunr.stopWordFilter,\r\n    lunr.stemmer\r\n  )\r\n\r\n  builder.searchPipeline.add(\r\n    lunr.stemmer\r\n  )\r\n\r\n  config.call(builder, builder)\r\n  return builder.build()\r\n}\r\n\r\nlunr.version = \"2.3.9\"\r\n/*!\r\n * lunr.utils\r\n * Copyright (C) 2020 Oliver Nightingale\r\n */\r\n\r\n/**\r\n * A namespace containing utils for the rest of the lunr library\r\n * @namespace lunr.utils\r\n */\r\nlunr.utils = {}\r\n\r\n/**\r\n * Print a warning message to the console.\r\n *\r\n * @param {String} message The message to be printed.\r\n * @memberOf lunr.utils\r\n * @function\r\n */\r\nlunr.utils.warn = (function (global) {\r\n  /* eslint-disable no-console */\r\n  return function (message) {\r\n    if (global.console && console.warn) {\r\n      console.warn(message)\r\n    }\r\n  }\r\n  /* eslint-enable no-console */\r\n})(this)\r\n\r\n/**\r\n * Convert an object to a string.\r\n *\r\n * In the case of `null` and `undefined` the function returns\r\n * the empty string, in all other cases the result of calling\r\n * `toString` on the passed object is returned.\r\n *\r\n * @param {Any} obj The object to convert to a string.\r\n * @return {String} string representation of the passed object.\r\n * @memberOf lunr.utils\r\n */\r\nlunr.utils.asString = function (obj) {\r\n  if (obj === void 0 || obj === null) {\r\n    return \"\"\r\n  } else {\r\n    return obj.toString()\r\n  }\r\n}\r\n\r\n/**\r\n * Clones an object.\r\n *\r\n * Will create a copy of an existing object such that any mutations\r\n * on the copy cannot affect the original.\r\n *\r\n * Only shallow objects are supported, passing a nested object to this\r\n * function will cause a TypeError.\r\n *\r\n * Objects with primitives, and arrays of primitives are supported.\r\n *\r\n * @param {Object} obj The object to clone.\r\n * @return {Object} a clone of the passed object.\r\n * @throws {TypeError} when a nested object is passed.\r\n * @memberOf Utils\r\n */\r\nlunr.utils.clone = function (obj) {\r\n  if (obj === null || obj === undefined) {\r\n    return obj\r\n  }\r\n\r\n  var clone = Object.create(null),\r\n      keys = Object.keys(obj)\r\n\r\n  for (var i = 0; i < keys.length; i++) {\r\n    var key = keys[i],\r\n        val = obj[key]\r\n\r\n    if (Array.isArray(val)) {\r\n      clone[key] = val.slice()\r\n      continue\r\n    }\r\n\r\n    if (typeof val === 'string' ||\r\n        typeof val === 'number' ||\r\n        typeof val === 'boolean') {\r\n      clone[key] = val\r\n      continue\r\n    }\r\n\r\n    throw new TypeError(\"clone is not deep and does not support nested objects\")\r\n  }\r\n\r\n  return clone\r\n}\r\nlunr.FieldRef = function (docRef, fieldName, stringValue) {\r\n  this.docRef = docRef\r\n  this.fieldName = fieldName\r\n  this._stringValue = stringValue\r\n}\r\n\r\nlunr.FieldRef.joiner = \"/\"\r\n\r\nlunr.FieldRef.fromString = function (s) {\r\n  var n = s.indexOf(lunr.FieldRef.joiner)\r\n\r\n  if (n === -1) {\r\n    throw \"malformed field ref string\"\r\n  }\r\n\r\n  var fieldRef = s.slice(0, n),\r\n      docRef = s.slice(n + 1)\r\n\r\n  return new lunr.FieldRef (docRef, fieldRef, s)\r\n}\r\n\r\nlunr.FieldRef.prototype.toString = function () {\r\n  if (this._stringValue == undefined) {\r\n    this._stringValue = this.fieldName + lunr.FieldRef.joiner + this.docRef\r\n  }\r\n\r\n  return this._stringValue\r\n}\r\n/*!\r\n * lunr.Set\r\n * Copyright (C) 2020 Oliver Nightingale\r\n */\r\n\r\n/**\r\n * A lunr set.\r\n *\r\n * @constructor\r\n */\r\nlunr.Set = function (elements) {\r\n  this.elements = Object.create(null)\r\n\r\n  if (elements) {\r\n    this.length = elements.length\r\n\r\n    for (var i = 0; i < this.length; i++) {\r\n      this.elements[elements[i]] = true\r\n    }\r\n  } else {\r\n    this.length = 0\r\n  }\r\n}\r\n\r\n/**\r\n * A complete set that contains all elements.\r\n *\r\n * @static\r\n * @readonly\r\n * @type {lunr.Set}\r\n */\r\nlunr.Set.complete = {\r\n  intersect: function (other) {\r\n    return other\r\n  },\r\n\r\n  union: function () {\r\n    return this\r\n  },\r\n\r\n  contains: function () {\r\n    return true\r\n  }\r\n}\r\n\r\n/**\r\n * An empty set that contains no elements.\r\n *\r\n * @static\r\n * @readonly\r\n * @type {lunr.Set}\r\n */\r\nlunr.Set.empty = {\r\n  intersect: function () {\r\n    return this\r\n  },\r\n\r\n  union: function (other) {\r\n    return other\r\n  },\r\n\r\n  contains: function () {\r\n    return false\r\n  }\r\n}\r\n\r\n/**\r\n * Returns true if this set contains the specified object.\r\n *\r\n * @param {object} object - Object whose presence in this set is to be tested.\r\n * @returns {boolean} - True if this set contains the specified object.\r\n */\r\nlunr.Set.prototype.contains = function (object) {\r\n  return !!this.elements[object]\r\n}\r\n\r\n/**\r\n * Returns a new set containing only the elements that are present in both\r\n * this set and the specified set.\r\n *\r\n * @param {lunr.Set} other - set to intersect with this set.\r\n * @returns {lunr.Set} a new set that is the intersection of this and the specified set.\r\n */\r\n\r\nlunr.Set.prototype.intersect = function (other) {\r\n  var a, b, elements, intersection = []\r\n\r\n  if (other === lunr.Set.complete) {\r\n    return this\r\n  }\r\n\r\n  if (other === lunr.Set.empty) {\r\n    return other\r\n  }\r\n\r\n  if (this.length < other.length) {\r\n    a = this\r\n    b = other\r\n  } else {\r\n    a = other\r\n    b = this\r\n  }\r\n\r\n  elements = Object.keys(a.elements)\r\n\r\n  for (var i = 0; i < elements.length; i++) {\r\n    var element = elements[i]\r\n    if (element in b.elements) {\r\n      intersection.push(element)\r\n    }\r\n  }\r\n\r\n  return new lunr.Set (intersection)\r\n}\r\n\r\n/**\r\n * Returns a new set combining the elements of this and the specified set.\r\n *\r\n * @param {lunr.Set} other - set to union with this set.\r\n * @return {lunr.Set} a new set that is the union of this and the specified set.\r\n */\r\n\r\nlunr.Set.prototype.union = function (other) {\r\n  if (other === lunr.Set.complete) {\r\n    return lunr.Set.complete\r\n  }\r\n\r\n  if (other === lunr.Set.empty) {\r\n    return this\r\n  }\r\n\r\n  return new lunr.Set(Object.keys(this.elements).concat(Object.keys(other.elements)))\r\n}\r\n/**\r\n * A function to calculate the inverse document frequency for\r\n * a posting. This is shared between the builder and the index\r\n *\r\n * @private\r\n * @param {object} posting - The posting for a given term\r\n * @param {number} documentCount - The total number of documents.\r\n */\r\nlunr.idf = function (posting, documentCount) {\r\n  var documentsWithTerm = 0\r\n\r\n  for (var fieldName in posting) {\r\n    if (fieldName == '_index') continue // Ignore the term index, its not a field\r\n    documentsWithTerm += Object.keys(posting[fieldName]).length\r\n  }\r\n\r\n  var x = (documentCount - documentsWithTerm + 0.5) / (documentsWithTerm + 0.5)\r\n\r\n  return Math.log(1 + Math.abs(x))\r\n}\r\n\r\n/**\r\n * A token wraps a string representation of a token\r\n * as it is passed through the text processing pipeline.\r\n *\r\n * @constructor\r\n * @param {string} [str=''] - The string token being wrapped.\r\n * @param {object} [metadata={}] - Metadata associated with this token.\r\n */\r\nlunr.Token = function (str, metadata) {\r\n  this.str = str || \"\"\r\n  this.metadata = metadata || {}\r\n}\r\n\r\n/**\r\n * Returns the token string that is being wrapped by this object.\r\n *\r\n * @returns {string}\r\n */\r\nlunr.Token.prototype.toString = function () {\r\n  return this.str\r\n}\r\n\r\n/**\r\n * A token update function is used when updating or optionally\r\n * when cloning a token.\r\n *\r\n * @callback lunr.Token~updateFunction\r\n * @param {string} str - The string representation of the token.\r\n * @param {Object} metadata - All metadata associated with this token.\r\n */\r\n\r\n/**\r\n * Applies the given function to the wrapped string token.\r\n *\r\n * @example\r\n * token.update(function (str, metadata) {\r\n *   return str.toUpperCase()\r\n * })\r\n *\r\n * @param {lunr.Token~updateFunction} fn - A function to apply to the token string.\r\n * @returns {lunr.Token}\r\n */\r\nlunr.Token.prototype.update = function (fn) {\r\n  this.str = fn(this.str, this.metadata)\r\n  return this\r\n}\r\n\r\n/**\r\n * Creates a clone of this token. Optionally a function can be\r\n * applied to the cloned token.\r\n *\r\n * @param {lunr.Token~updateFunction} [fn] - An optional function to apply to the cloned token.\r\n * @returns {lunr.Token}\r\n */\r\nlunr.Token.prototype.clone = function (fn) {\r\n  fn = fn || function (s) { return s }\r\n  return new lunr.Token (fn(this.str, this.metadata), this.metadata)\r\n}\r\n/*!\r\n * lunr.tokenizer\r\n * Copyright (C) 2020 Oliver Nightingale\r\n */\r\n\r\n/**\r\n * A function for splitting a string into tokens ready to be inserted into\r\n * the search index. Uses `lunr.tokenizer.separator` to split strings, change\r\n * the value of this property to change how strings are split into tokens.\r\n *\r\n * This tokenizer will convert its parameter to a string by calling `toString` and\r\n * then will split this string on the character in `lunr.tokenizer.separator`.\r\n * Arrays will have their elements converted to strings and wrapped in a lunr.Token.\r\n *\r\n * Optional metadata can be passed to the tokenizer, this metadata will be cloned and\r\n * added as metadata to every token that is created from the object to be tokenized.\r\n *\r\n * @static\r\n * @param {?(string|object|object[])} obj - The object to convert into tokens\r\n * @param {?object} metadata - Optional metadata to associate with every token\r\n * @returns {lunr.Token[]}\r\n * @see {@link lunr.Pipeline}\r\n */\r\nlunr.tokenizer = function (obj, metadata) {\r\n  if (obj == null || obj == undefined) {\r\n    return []\r\n  }\r\n\r\n  if (Array.isArray(obj)) {\r\n    return obj.map(function (t) {\r\n      return new lunr.Token(\r\n        lunr.utils.asString(t).toLowerCase(),\r\n        lunr.utils.clone(metadata)\r\n      )\r\n    })\r\n  }\r\n\r\n  var str = obj.toString().toLowerCase(),\r\n      len = str.length,\r\n      tokens = []\r\n\r\n  for (var sliceEnd = 0, sliceStart = 0; sliceEnd <= len; sliceEnd++) {\r\n    var char = str.charAt(sliceEnd),\r\n        sliceLength = sliceEnd - sliceStart\r\n\r\n    if ((char.match(lunr.tokenizer.separator) || sliceEnd == len)) {\r\n\r\n      if (sliceLength > 0) {\r\n        var tokenMetadata = lunr.utils.clone(metadata) || {}\r\n        tokenMetadata[\"position\"] = [sliceStart, sliceLength]\r\n        tokenMetadata[\"index\"] = tokens.length\r\n\r\n        tokens.push(\r\n          new lunr.Token (\r\n            str.slice(sliceStart, sliceEnd),\r\n            tokenMetadata\r\n          )\r\n        )\r\n      }\r\n\r\n      sliceStart = sliceEnd + 1\r\n    }\r\n\r\n  }\r\n\r\n  return tokens\r\n}\r\n\r\n/**\r\n * The separator used to split a string into tokens. Override this property to change the behaviour of\r\n * `lunr.tokenizer` behaviour when tokenizing strings. By default this splits on whitespace and hyphens.\r\n *\r\n * @static\r\n * @see lunr.tokenizer\r\n */\r\nlunr.tokenizer.separator = /[\\s\\-]+/\r\n/*!\r\n * lunr.Pipeline\r\n * Copyright (C) 2020 Oliver Nightingale\r\n */\r\n\r\n/**\r\n * lunr.Pipelines maintain an ordered list of functions to be applied to all\r\n * tokens in documents entering the search index and queries being ran against\r\n * the index.\r\n *\r\n * An instance of lunr.Index created with the lunr shortcut will contain a\r\n * pipeline with a stop word filter and an English language stemmer. Extra\r\n * functions can be added before or after either of these functions or these\r\n * default functions can be removed.\r\n *\r\n * When run the pipeline will call each function in turn, passing a token, the\r\n * index of that token in the original list of all tokens and finally a list of\r\n * all the original tokens.\r\n *\r\n * The output of functions in the pipeline will be passed to the next function\r\n * in the pipeline. To exclude a token from entering the index the function\r\n * should return undefined, the rest of the pipeline will not be called with\r\n * this token.\r\n *\r\n * For serialisation of pipelines to work, all functions used in an instance of\r\n * a pipeline should be registered with lunr.Pipeline. Registered functions can\r\n * then be loaded. If trying to load a serialised pipeline that uses functions\r\n * that are not registered an error will be thrown.\r\n *\r\n * If not planning on serialising the pipeline then registering pipeline functions\r\n * is not necessary.\r\n *\r\n * @constructor\r\n */\r\nlunr.Pipeline = function () {\r\n  this._stack = []\r\n}\r\n\r\nlunr.Pipeline.registeredFunctions = Object.create(null)\r\n\r\n/**\r\n * A pipeline function maps lunr.Token to lunr.Token. A lunr.Token contains the token\r\n * string as well as all known metadata. A pipeline function can mutate the token string\r\n * or mutate (or add) metadata for a given token.\r\n *\r\n * A pipeline function can indicate that the passed token should be discarded by returning\r\n * null, undefined or an empty string. This token will not be passed to any downstream pipeline\r\n * functions and will not be added to the index.\r\n *\r\n * Multiple tokens can be returned by returning an array of tokens. Each token will be passed\r\n * to any downstream pipeline functions and all will returned tokens will be added to the index.\r\n *\r\n * Any number of pipeline functions may be chained together using a lunr.Pipeline.\r\n *\r\n * @interface lunr.PipelineFunction\r\n * @param {lunr.Token} token - A token from the document being processed.\r\n * @param {number} i - The index of this token in the complete list of tokens for this document/field.\r\n * @param {lunr.Token[]} tokens - All tokens for this document/field.\r\n * @returns {(?lunr.Token|lunr.Token[])}\r\n */\r\n\r\n/**\r\n * Register a function with the pipeline.\r\n *\r\n * Functions that are used in the pipeline should be registered if the pipeline\r\n * needs to be serialised, or a serialised pipeline needs to be loaded.\r\n *\r\n * Registering a function does not add it to a pipeline, functions must still be\r\n * added to instances of the pipeline for them to be used when running a pipeline.\r\n *\r\n * @param {lunr.PipelineFunction} fn - The function to check for.\r\n * @param {String} label - The label to register this function with\r\n */\r\nlunr.Pipeline.registerFunction = function (fn, label) {\r\n  if (label in this.registeredFunctions) {\r\n    lunr.utils.warn('Overwriting existing registered function: ' + label)\r\n  }\r\n\r\n  fn.label = label\r\n  lunr.Pipeline.registeredFunctions[fn.label] = fn\r\n}\r\n\r\n/**\r\n * Warns if the function is not registered as a Pipeline function.\r\n *\r\n * @param {lunr.PipelineFunction} fn - The function to check for.\r\n * @private\r\n */\r\nlunr.Pipeline.warnIfFunctionNotRegistered = function (fn) {\r\n  var isRegistered = fn.label && (fn.label in this.registeredFunctions)\r\n\r\n  if (!isRegistered) {\r\n    lunr.utils.warn('Function is not registered with pipeline. This may cause problems when serialising the index.\\n', fn)\r\n  }\r\n}\r\n\r\n/**\r\n * Loads a previously serialised pipeline.\r\n *\r\n * All functions to be loaded must already be registered with lunr.Pipeline.\r\n * If any function from the serialised data has not been registered then an\r\n * error will be thrown.\r\n *\r\n * @param {Object} serialised - The serialised pipeline to load.\r\n * @returns {lunr.Pipeline}\r\n */\r\nlunr.Pipeline.load = function (serialised) {\r\n  var pipeline = new lunr.Pipeline\r\n\r\n  serialised.forEach(function (fnName) {\r\n    var fn = lunr.Pipeline.registeredFunctions[fnName]\r\n\r\n    if (fn) {\r\n      pipeline.add(fn)\r\n    } else {\r\n      throw new Error('Cannot load unregistered function: ' + fnName)\r\n    }\r\n  })\r\n\r\n  return pipeline\r\n}\r\n\r\n/**\r\n * Adds new functions to the end of the pipeline.\r\n *\r\n * Logs a warning if the function has not been registered.\r\n *\r\n * @param {lunr.PipelineFunction[]} functions - Any number of functions to add to the pipeline.\r\n */\r\nlunr.Pipeline.prototype.add = function () {\r\n  var fns = Array.prototype.slice.call(arguments)\r\n\r\n  fns.forEach(function (fn) {\r\n    lunr.Pipeline.warnIfFunctionNotRegistered(fn)\r\n    this._stack.push(fn)\r\n  }, this)\r\n}\r\n\r\n/**\r\n * Adds a single function after a function that already exists in the\r\n * pipeline.\r\n *\r\n * Logs a warning if the function has not been registered.\r\n *\r\n * @param {lunr.PipelineFunction} existingFn - A function that already exists in the pipeline.\r\n * @param {lunr.PipelineFunction} newFn - The new function to add to the pipeline.\r\n */\r\nlunr.Pipeline.prototype.after = function (existingFn, newFn) {\r\n  lunr.Pipeline.warnIfFunctionNotRegistered(newFn)\r\n\r\n  var pos = this._stack.indexOf(existingFn)\r\n  if (pos == -1) {\r\n    throw new Error('Cannot find existingFn')\r\n  }\r\n\r\n  pos = pos + 1\r\n  this._stack.splice(pos, 0, newFn)\r\n}\r\n\r\n/**\r\n * Adds a single function before a function that already exists in the\r\n * pipeline.\r\n *\r\n * Logs a warning if the function has not been registered.\r\n *\r\n * @param {lunr.PipelineFunction} existingFn - A function that already exists in the pipeline.\r\n * @param {lunr.PipelineFunction} newFn - The new function to add to the pipeline.\r\n */\r\nlunr.Pipeline.prototype.before = function (existingFn, newFn) {\r\n  lunr.Pipeline.warnIfFunctionNotRegistered(newFn)\r\n\r\n  var pos = this._stack.indexOf(existingFn)\r\n  if (pos == -1) {\r\n    throw new Error('Cannot find existingFn')\r\n  }\r\n\r\n  this._stack.splice(pos, 0, newFn)\r\n}\r\n\r\n/**\r\n * Removes a function from the pipeline.\r\n *\r\n * @param {lunr.PipelineFunction} fn The function to remove from the pipeline.\r\n */\r\nlunr.Pipeline.prototype.remove = function (fn) {\r\n  var pos = this._stack.indexOf(fn)\r\n  if (pos == -1) {\r\n    return\r\n  }\r\n\r\n  this._stack.splice(pos, 1)\r\n}\r\n\r\n/**\r\n * Runs the current list of functions that make up the pipeline against the\r\n * passed tokens.\r\n *\r\n * @param {Array} tokens The tokens to run through the pipeline.\r\n * @returns {Array}\r\n */\r\nlunr.Pipeline.prototype.run = function (tokens) {\r\n  var stackLength = this._stack.length\r\n\r\n  for (var i = 0; i < stackLength; i++) {\r\n    var fn = this._stack[i]\r\n    var memo = []\r\n\r\n    for (var j = 0; j < tokens.length; j++) {\r\n      var result = fn(tokens[j], j, tokens)\r\n\r\n      if (result === null || result === void 0 || result === '') continue\r\n\r\n      if (Array.isArray(result)) {\r\n        for (var k = 0; k < result.length; k++) {\r\n          memo.push(result[k])\r\n        }\r\n      } else {\r\n        memo.push(result)\r\n      }\r\n    }\r\n\r\n    tokens = memo\r\n  }\r\n\r\n  return tokens\r\n}\r\n\r\n/**\r\n * Convenience method for passing a string through a pipeline and getting\r\n * strings out. This method takes care of wrapping the passed string in a\r\n * token and mapping the resulting tokens back to strings.\r\n *\r\n * @param {string} str - The string to pass through the pipeline.\r\n * @param {?object} metadata - Optional metadata to associate with the token\r\n * passed to the pipeline.\r\n * @returns {string[]}\r\n */\r\nlunr.Pipeline.prototype.runString = function (str, metadata) {\r\n  var token = new lunr.Token (str, metadata)\r\n\r\n  return this.run([token]).map(function (t) {\r\n    return t.toString()\r\n  })\r\n}\r\n\r\n/**\r\n * Resets the pipeline by removing any existing processors.\r\n *\r\n */\r\nlunr.Pipeline.prototype.reset = function () {\r\n  this._stack = []\r\n}\r\n\r\n/**\r\n * Returns a representation of the pipeline ready for serialisation.\r\n *\r\n * Logs a warning if the function has not been registered.\r\n *\r\n * @returns {Array}\r\n */\r\nlunr.Pipeline.prototype.toJSON = function () {\r\n  return this._stack.map(function (fn) {\r\n    lunr.Pipeline.warnIfFunctionNotRegistered(fn)\r\n\r\n    return fn.label\r\n  })\r\n}\r\n/*!\r\n * lunr.Vector\r\n * Copyright (C) 2020 Oliver Nightingale\r\n */\r\n\r\n/**\r\n * A vector is used to construct the vector space of documents and queries. These\r\n * vectors support operations to determine the similarity between two documents or\r\n * a document and a query.\r\n *\r\n * Normally no parameters are required for initializing a vector, but in the case of\r\n * loading a previously dumped vector the raw elements can be provided to the constructor.\r\n *\r\n * For performance reasons vectors are implemented with a flat array, where an elements\r\n * index is immediately followed by its value. E.g. [index, value, index, value]. This\r\n * allows the underlying array to be as sparse as possible and still offer decent\r\n * performance when being used for vector calculations.\r\n *\r\n * @constructor\r\n * @param {Number[]} [elements] - The flat list of element index and element value pairs.\r\n */\r\nlunr.Vector = function (elements) {\r\n  this._magnitude = 0\r\n  this.elements = elements || []\r\n}\r\n\r\n\r\n/**\r\n * Calculates the position within the vector to insert a given index.\r\n *\r\n * This is used internally by insert and upsert. If there are duplicate indexes then\r\n * the position is returned as if the value for that index were to be updated, but it\r\n * is the callers responsibility to check whether there is a duplicate at that index\r\n *\r\n * @param {Number} insertIdx - The index at which the element should be inserted.\r\n * @returns {Number}\r\n */\r\nlunr.Vector.prototype.positionForIndex = function (index) {\r\n  // For an empty vector the tuple can be inserted at the beginning\r\n  if (this.elements.length == 0) {\r\n    return 0\r\n  }\r\n\r\n  var start = 0,\r\n      end = this.elements.length / 2,\r\n      sliceLength = end - start,\r\n      pivotPoint = Math.floor(sliceLength / 2),\r\n      pivotIndex = this.elements[pivotPoint * 2]\r\n\r\n  while (sliceLength > 1) {\r\n    if (pivotIndex < index) {\r\n      start = pivotPoint\r\n    }\r\n\r\n    if (pivotIndex > index) {\r\n      end = pivotPoint\r\n    }\r\n\r\n    if (pivotIndex == index) {\r\n      break\r\n    }\r\n\r\n    sliceLength = end - start\r\n    pivotPoint = start + Math.floor(sliceLength / 2)\r\n    pivotIndex = this.elements[pivotPoint * 2]\r\n  }\r\n\r\n  if (pivotIndex == index) {\r\n    return pivotPoint * 2\r\n  }\r\n\r\n  if (pivotIndex > index) {\r\n    return pivotPoint * 2\r\n  }\r\n\r\n  if (pivotIndex < index) {\r\n    return (pivotPoint + 1) * 2\r\n  }\r\n}\r\n\r\n/**\r\n * Inserts an element at an index within the vector.\r\n *\r\n * Does not allow duplicates, will throw an error if there is already an entry\r\n * for this index.\r\n *\r\n * @param {Number} insertIdx - The index at which the element should be inserted.\r\n * @param {Number} val - The value to be inserted into the vector.\r\n */\r\nlunr.Vector.prototype.insert = function (insertIdx, val) {\r\n  this.upsert(insertIdx, val, function () {\r\n    throw \"duplicate index\"\r\n  })\r\n}\r\n\r\n/**\r\n * Inserts or updates an existing index within the vector.\r\n *\r\n * @param {Number} insertIdx - The index at which the element should be inserted.\r\n * @param {Number} val - The value to be inserted into the vector.\r\n * @param {function} fn - A function that is called for updates, the existing value and the\r\n * requested value are passed as arguments\r\n */\r\nlunr.Vector.prototype.upsert = function (insertIdx, val, fn) {\r\n  this._magnitude = 0\r\n  var position = this.positionForIndex(insertIdx)\r\n\r\n  if (this.elements[position] == insertIdx) {\r\n    this.elements[position + 1] = fn(this.elements[position + 1], val)\r\n  } else {\r\n    this.elements.splice(position, 0, insertIdx, val)\r\n  }\r\n}\r\n\r\n/**\r\n * Calculates the magnitude of this vector.\r\n *\r\n * @returns {Number}\r\n */\r\nlunr.Vector.prototype.magnitude = function () {\r\n  if (this._magnitude) return this._magnitude\r\n\r\n  var sumOfSquares = 0,\r\n      elementsLength = this.elements.length\r\n\r\n  for (var i = 1; i < elementsLength; i += 2) {\r\n    var val = this.elements[i]\r\n    sumOfSquares += val * val\r\n  }\r\n\r\n  return this._magnitude = Math.sqrt(sumOfSquares)\r\n}\r\n\r\n/**\r\n * Calculates the dot product of this vector and another vector.\r\n *\r\n * @param {lunr.Vector} otherVector - The vector to compute the dot product with.\r\n * @returns {Number}\r\n */\r\nlunr.Vector.prototype.dot = function (otherVector) {\r\n  var dotProduct = 0,\r\n      a = this.elements, b = otherVector.elements,\r\n      aLen = a.length, bLen = b.length,\r\n      aVal = 0, bVal = 0,\r\n      i = 0, j = 0\r\n\r\n  while (i < aLen && j < bLen) {\r\n    aVal = a[i], bVal = b[j]\r\n    if (aVal < bVal) {\r\n      i += 2\r\n    } else if (aVal > bVal) {\r\n      j += 2\r\n    } else if (aVal == bVal) {\r\n      dotProduct += a[i + 1] * b[j + 1]\r\n      i += 2\r\n      j += 2\r\n    }\r\n  }\r\n\r\n  return dotProduct\r\n}\r\n\r\n/**\r\n * Calculates the similarity between this vector and another vector.\r\n *\r\n * @param {lunr.Vector} otherVector - The other vector to calculate the\r\n * similarity with.\r\n * @returns {Number}\r\n */\r\nlunr.Vector.prototype.similarity = function (otherVector) {\r\n  return this.dot(otherVector) / this.magnitude() || 0\r\n}\r\n\r\n/**\r\n * Converts the vector to an array of the elements within the vector.\r\n *\r\n * @returns {Number[]}\r\n */\r\nlunr.Vector.prototype.toArray = function () {\r\n  var output = new Array (this.elements.length / 2)\r\n\r\n  for (var i = 1, j = 0; i < this.elements.length; i += 2, j++) {\r\n    output[j] = this.elements[i]\r\n  }\r\n\r\n  return output\r\n}\r\n\r\n/**\r\n * A JSON serializable representation of the vector.\r\n *\r\n * @returns {Number[]}\r\n */\r\nlunr.Vector.prototype.toJSON = function () {\r\n  return this.elements\r\n}\r\n/* eslint-disable */\r\n/*!\r\n * lunr.stemmer\r\n * Copyright (C) 2020 Oliver Nightingale\r\n * Includes code from - http://tartarus.org/~martin/PorterStemmer/js.txt\r\n */\r\n\r\n/**\r\n * lunr.stemmer is an english language stemmer, this is a JavaScript\r\n * implementation of the PorterStemmer taken from http://tartarus.org/~martin\r\n *\r\n * @static\r\n * @implements {lunr.PipelineFunction}\r\n * @param {lunr.Token} token - The string to stem\r\n * @returns {lunr.Token}\r\n * @see {@link lunr.Pipeline}\r\n * @function\r\n */\r\nlunr.stemmer = (function(){\r\n  var step2list = {\r\n      \"ational\" : \"ate\",\r\n      \"tional\" : \"tion\",\r\n      \"enci\" : \"ence\",\r\n      \"anci\" : \"ance\",\r\n      \"izer\" : \"ize\",\r\n      \"bli\" : \"ble\",\r\n      \"alli\" : \"al\",\r\n      \"entli\" : \"ent\",\r\n      \"eli\" : \"e\",\r\n      \"ousli\" : \"ous\",\r\n      \"ization\" : \"ize\",\r\n      \"ation\" : \"ate\",\r\n      \"ator\" : \"ate\",\r\n      \"alism\" : \"al\",\r\n      \"iveness\" : \"ive\",\r\n      \"fulness\" : \"ful\",\r\n      \"ousness\" : \"ous\",\r\n      \"aliti\" : \"al\",\r\n      \"iviti\" : \"ive\",\r\n      \"biliti\" : \"ble\",\r\n      \"logi\" : \"log\"\r\n    },\r\n\r\n    step3list = {\r\n      \"icate\" : \"ic\",\r\n      \"ative\" : \"\",\r\n      \"alize\" : \"al\",\r\n      \"iciti\" : \"ic\",\r\n      \"ical\" : \"ic\",\r\n      \"ful\" : \"\",\r\n      \"ness\" : \"\"\r\n    },\r\n\r\n    c = \"[^aeiou]\",          // consonant\r\n    v = \"[aeiouy]\",          // vowel\r\n    C = c + \"[^aeiouy]*\",    // consonant sequence\r\n    V = v + \"[aeiou]*\",      // vowel sequence\r\n\r\n    mgr0 = \"^(\" + C + \")?\" + V + C,               // [C]VC... is m>0\r\n    meq1 = \"^(\" + C + \")?\" + V + C + \"(\" + V + \")?$\",  // [C]VC[V] is m=1\r\n    mgr1 = \"^(\" + C + \")?\" + V + C + V + C,       // [C]VCVC... is m>1\r\n    s_v = \"^(\" + C + \")?\" + v;                   // vowel in stem\r\n\r\n  var re_mgr0 = new RegExp(mgr0);\r\n  var re_mgr1 = new RegExp(mgr1);\r\n  var re_meq1 = new RegExp(meq1);\r\n  var re_s_v = new RegExp(s_v);\r\n\r\n  var re_1a = /^(.+?)(ss|i)es$/;\r\n  var re2_1a = /^(.+?)([^s])s$/;\r\n  var re_1b = /^(.+?)eed$/;\r\n  var re2_1b = /^(.+?)(ed|ing)$/;\r\n  var re_1b_2 = /.$/;\r\n  var re2_1b_2 = /(at|bl|iz)$/;\r\n  var re3_1b_2 = new RegExp(\"([^aeiouylsz])\\\\1$\");\r\n  var re4_1b_2 = new RegExp(\"^\" + C + v + \"[^aeiouwxy]$\");\r\n\r\n  var re_1c = /^(.+?[^aeiou])y$/;\r\n  var re_2 = /^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/;\r\n\r\n  var re_3 = /^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/;\r\n\r\n  var re_4 = /^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/;\r\n  var re2_4 = /^(.+?)(s|t)(ion)$/;\r\n\r\n  var re_5 = /^(.+?)e$/;\r\n  var re_5_1 = /ll$/;\r\n  var re3_5 = new RegExp(\"^\" + C + v + \"[^aeiouwxy]$\");\r\n\r\n  var porterStemmer = function porterStemmer(w) {\r\n    var stem,\r\n      suffix,\r\n      firstch,\r\n      re,\r\n      re2,\r\n      re3,\r\n      re4;\r\n\r\n    if (w.length < 3) { return w; }\r\n\r\n    firstch = w.substr(0,1);\r\n    if (firstch == \"y\") {\r\n      w = firstch.toUpperCase() + w.substr(1);\r\n    }\r\n\r\n    // Step 1a\r\n    re = re_1a\r\n    re2 = re2_1a;\r\n\r\n    if (re.test(w)) { w = w.replace(re,\"$1$2\"); }\r\n    else if (re2.test(w)) { w = w.replace(re2,\"$1$2\"); }\r\n\r\n    // Step 1b\r\n    re = re_1b;\r\n    re2 = re2_1b;\r\n    if (re.test(w)) {\r\n      var fp = re.exec(w);\r\n      re = re_mgr0;\r\n      if (re.test(fp[1])) {\r\n        re = re_1b_2;\r\n        w = w.replace(re,\"\");\r\n      }\r\n    } else if (re2.test(w)) {\r\n      var fp = re2.exec(w);\r\n      stem = fp[1];\r\n      re2 = re_s_v;\r\n      if (re2.test(stem)) {\r\n        w = stem;\r\n        re2 = re2_1b_2;\r\n        re3 = re3_1b_2;\r\n        re4 = re4_1b_2;\r\n        if (re2.test(w)) { w = w + \"e\"; }\r\n        else if (re3.test(w)) { re = re_1b_2; w = w.replace(re,\"\"); }\r\n        else if (re4.test(w)) { w = w + \"e\"; }\r\n      }\r\n    }\r\n\r\n    // Step 1c - replace suffix y or Y by i if preceded by a non-vowel which is not the first letter of the word (so cry -> cri, by -> by, say -> say)\r\n    re = re_1c;\r\n    if (re.test(w)) {\r\n      var fp = re.exec(w);\r\n      stem = fp[1];\r\n      w = stem + \"i\";\r\n    }\r\n\r\n    // Step 2\r\n    re = re_2;\r\n    if (re.test(w)) {\r\n      var fp = re.exec(w);\r\n      stem = fp[1];\r\n      suffix = fp[2];\r\n      re = re_mgr0;\r\n      if (re.test(stem)) {\r\n        w = stem + step2list[suffix];\r\n      }\r\n    }\r\n\r\n    // Step 3\r\n    re = re_3;\r\n    if (re.test(w)) {\r\n      var fp = re.exec(w);\r\n      stem = fp[1];\r\n      suffix = fp[2];\r\n      re = re_mgr0;\r\n      if (re.test(stem)) {\r\n        w = stem + step3list[suffix];\r\n      }\r\n    }\r\n\r\n    // Step 4\r\n    re = re_4;\r\n    re2 = re2_4;\r\n    if (re.test(w)) {\r\n      var fp = re.exec(w);\r\n      stem = fp[1];\r\n      re = re_mgr1;\r\n      if (re.test(stem)) {\r\n        w = stem;\r\n      }\r\n    } else if (re2.test(w)) {\r\n      var fp = re2.exec(w);\r\n      stem = fp[1] + fp[2];\r\n      re2 = re_mgr1;\r\n      if (re2.test(stem)) {\r\n        w = stem;\r\n      }\r\n    }\r\n\r\n    // Step 5\r\n    re = re_5;\r\n    if (re.test(w)) {\r\n      var fp = re.exec(w);\r\n      stem = fp[1];\r\n      re = re_mgr1;\r\n      re2 = re_meq1;\r\n      re3 = re3_5;\r\n      if (re.test(stem) || (re2.test(stem) && !(re3.test(stem)))) {\r\n        w = stem;\r\n      }\r\n    }\r\n\r\n    re = re_5_1;\r\n    re2 = re_mgr1;\r\n    if (re.test(w) && re2.test(w)) {\r\n      re = re_1b_2;\r\n      w = w.replace(re,\"\");\r\n    }\r\n\r\n    // and turn initial Y back to y\r\n\r\n    if (firstch == \"y\") {\r\n      w = firstch.toLowerCase() + w.substr(1);\r\n    }\r\n\r\n    return w;\r\n  };\r\n\r\n  return function (token) {\r\n    return token.update(porterStemmer);\r\n  }\r\n})();\r\n\r\nlunr.Pipeline.registerFunction(lunr.stemmer, 'stemmer')\r\n/*!\r\n * lunr.stopWordFilter\r\n * Copyright (C) 2020 Oliver Nightingale\r\n */\r\n\r\n/**\r\n * lunr.generateStopWordFilter builds a stopWordFilter function from the provided\r\n * list of stop words.\r\n *\r\n * The built in lunr.stopWordFilter is built using this generator and can be used\r\n * to generate custom stopWordFilters for applications or non English languages.\r\n *\r\n * @function\r\n * @param {Array} token The token to pass through the filter\r\n * @returns {lunr.PipelineFunction}\r\n * @see lunr.Pipeline\r\n * @see lunr.stopWordFilter\r\n */\r\nlunr.generateStopWordFilter = function (stopWords) {\r\n  var words = stopWords.reduce(function (memo, stopWord) {\r\n    memo[stopWord] = stopWord\r\n    return memo\r\n  }, {})\r\n\r\n  return function (token) {\r\n    if (token && words[token.toString()] !== token.toString()) return token\r\n  }\r\n}\r\n\r\n/**\r\n * lunr.stopWordFilter is an English language stop word list filter, any words\r\n * contained in the list will not be passed through the filter.\r\n *\r\n * This is intended to be used in the Pipeline. If the token does not pass the\r\n * filter then undefined will be returned.\r\n *\r\n * @function\r\n * @implements {lunr.PipelineFunction}\r\n * @params {lunr.Token} token - A token to check for being a stop word.\r\n * @returns {lunr.Token}\r\n * @see {@link lunr.Pipeline}\r\n */\r\nlunr.stopWordFilter = lunr.generateStopWordFilter([\r\n  'a',\r\n  'able',\r\n  'about',\r\n  'across',\r\n  'after',\r\n  'all',\r\n  'almost',\r\n  'also',\r\n  'am',\r\n  'among',\r\n  'an',\r\n  'and',\r\n  'any',\r\n  'are',\r\n  'as',\r\n  'at',\r\n  'be',\r\n  'because',\r\n  'been',\r\n  'but',\r\n  'by',\r\n  'can',\r\n  'cannot',\r\n  'could',\r\n  'dear',\r\n  'did',\r\n  'do',\r\n  'does',\r\n  'either',\r\n  'else',\r\n  'ever',\r\n  'every',\r\n  'for',\r\n  'from',\r\n  'get',\r\n  'got',\r\n  'had',\r\n  'has',\r\n  'have',\r\n  'he',\r\n  'her',\r\n  'hers',\r\n  'him',\r\n  'his',\r\n  'how',\r\n  'however',\r\n  'i',\r\n  'if',\r\n  'in',\r\n  'into',\r\n  'is',\r\n  'it',\r\n  'its',\r\n  'just',\r\n  'least',\r\n  'let',\r\n  'like',\r\n  'likely',\r\n  'may',\r\n  'me',\r\n  'might',\r\n  'most',\r\n  'must',\r\n  'my',\r\n  'neither',\r\n  'no',\r\n  'nor',\r\n  'not',\r\n  'of',\r\n  'off',\r\n  'often',\r\n  'on',\r\n  'only',\r\n  'or',\r\n  'other',\r\n  'our',\r\n  'own',\r\n  'rather',\r\n  'said',\r\n  'say',\r\n  'says',\r\n  'she',\r\n  'should',\r\n  'since',\r\n  'so',\r\n  'some',\r\n  'than',\r\n  'that',\r\n  'the',\r\n  'their',\r\n  'them',\r\n  'then',\r\n  'there',\r\n  'these',\r\n  'they',\r\n  'this',\r\n  'tis',\r\n  'to',\r\n  'too',\r\n  'twas',\r\n  'us',\r\n  'wants',\r\n  'was',\r\n  'we',\r\n  'were',\r\n  'what',\r\n  'when',\r\n  'where',\r\n  'which',\r\n  'while',\r\n  'who',\r\n  'whom',\r\n  'why',\r\n  'will',\r\n  'with',\r\n  'would',\r\n  'yet',\r\n  'you',\r\n  'your'\r\n])\r\n\r\nlunr.Pipeline.registerFunction(lunr.stopWordFilter, 'stopWordFilter')\r\n/*!\r\n * lunr.trimmer\r\n * Copyright (C) 2020 Oliver Nightingale\r\n */\r\n\r\n/**\r\n * lunr.trimmer is a pipeline function for trimming non word\r\n * characters from the beginning and end of tokens before they\r\n * enter the index.\r\n *\r\n * This implementation may not work correctly for non latin\r\n * characters and should either be removed or adapted for use\r\n * with languages with non-latin characters.\r\n *\r\n * @static\r\n * @implements {lunr.PipelineFunction}\r\n * @param {lunr.Token} token The token to pass through the filter\r\n * @returns {lunr.Token}\r\n * @see lunr.Pipeline\r\n */\r\nlunr.trimmer = function (token) {\r\n  return token.update(function (s) {\r\n    return s.replace(/^\\W+/, '').replace(/\\W+$/, '')\r\n  })\r\n}\r\n\r\nlunr.Pipeline.registerFunction(lunr.trimmer, 'trimmer')\r\n/*!\r\n * lunr.TokenSet\r\n * Copyright (C) 2020 Oliver Nightingale\r\n */\r\n\r\n/**\r\n * A token set is used to store the unique list of all tokens\r\n * within an index. Token sets are also used to represent an\r\n * incoming query to the index, this query token set and index\r\n * token set are then intersected to find which tokens to look\r\n * up in the inverted index.\r\n *\r\n * A token set can hold multiple tokens, as in the case of the\r\n * index token set, or it can hold a single token as in the\r\n * case of a simple query token set.\r\n *\r\n * Additionally token sets are used to perform wildcard matching.\r\n * Leading, contained and trailing wildcards are supported, and\r\n * from this edit distance matching can also be provided.\r\n *\r\n * Token sets are implemented as a minimal finite state automata,\r\n * where both common prefixes and suffixes are shared between tokens.\r\n * This helps to reduce the space used for storing the token set.\r\n *\r\n * @constructor\r\n */\r\nlunr.TokenSet = function () {\r\n  this.final = false\r\n  this.edges = {}\r\n  this.id = lunr.TokenSet._nextId\r\n  lunr.TokenSet._nextId += 1\r\n}\r\n\r\n/**\r\n * Keeps track of the next, auto increment, identifier to assign\r\n * to a new tokenSet.\r\n *\r\n * TokenSets require a unique identifier to be correctly minimised.\r\n *\r\n * @private\r\n */\r\nlunr.TokenSet._nextId = 1\r\n\r\n/**\r\n * Creates a TokenSet instance from the given sorted array of words.\r\n *\r\n * @param {String[]} arr - A sorted array of strings to create the set from.\r\n * @returns {lunr.TokenSet}\r\n * @throws Will throw an error if the input array is not sorted.\r\n */\r\nlunr.TokenSet.fromArray = function (arr) {\r\n  var builder = new lunr.TokenSet.Builder\r\n\r\n  for (var i = 0, len = arr.length; i < len; i++) {\r\n    builder.insert(arr[i])\r\n  }\r\n\r\n  builder.finish()\r\n  return builder.root\r\n}\r\n\r\n/**\r\n * Creates a token set from a query clause.\r\n *\r\n * @private\r\n * @param {Object} clause - A single clause from lunr.Query.\r\n * @param {string} clause.term - The query clause term.\r\n * @param {number} [clause.editDistance] - The optional edit distance for the term.\r\n * @returns {lunr.TokenSet}\r\n */\r\nlunr.TokenSet.fromClause = function (clause) {\r\n  if ('editDistance' in clause) {\r\n    return lunr.TokenSet.fromFuzzyString(clause.term, clause.editDistance)\r\n  } else {\r\n    return lunr.TokenSet.fromString(clause.term)\r\n  }\r\n}\r\n\r\n/**\r\n * Creates a token set representing a single string with a specified\r\n * edit distance.\r\n *\r\n * Insertions, deletions, substitutions and transpositions are each\r\n * treated as an edit distance of 1.\r\n *\r\n * Increasing the allowed edit distance will have a dramatic impact\r\n * on the performance of both creating and intersecting these TokenSets.\r\n * It is advised to keep the edit distance less than 3.\r\n *\r\n * @param {string} str - The string to create the token set from.\r\n * @param {number} editDistance - The allowed edit distance to match.\r\n * @returns {lunr.Vector}\r\n */\r\nlunr.TokenSet.fromFuzzyString = function (str, editDistance) {\r\n  var root = new lunr.TokenSet\r\n\r\n  var stack = [{\r\n    node: root,\r\n    editsRemaining: editDistance,\r\n    str: str\r\n  }]\r\n\r\n  while (stack.length) {\r\n    var frame = stack.pop()\r\n\r\n    // no edit\r\n    if (frame.str.length > 0) {\r\n      var char = frame.str.charAt(0),\r\n          noEditNode\r\n\r\n      if (char in frame.node.edges) {\r\n        noEditNode = frame.node.edges[char]\r\n      } else {\r\n        noEditNode = new lunr.TokenSet\r\n        frame.node.edges[char] = noEditNode\r\n      }\r\n\r\n      if (frame.str.length == 1) {\r\n        noEditNode.final = true\r\n      }\r\n\r\n      stack.push({\r\n        node: noEditNode,\r\n        editsRemaining: frame.editsRemaining,\r\n        str: frame.str.slice(1)\r\n      })\r\n    }\r\n\r\n    if (frame.editsRemaining == 0) {\r\n      continue\r\n    }\r\n\r\n    // insertion\r\n    if (\"*\" in frame.node.edges) {\r\n      var insertionNode = frame.node.edges[\"*\"]\r\n    } else {\r\n      var insertionNode = new lunr.TokenSet\r\n      frame.node.edges[\"*\"] = insertionNode\r\n    }\r\n\r\n    if (frame.str.length == 0) {\r\n      insertionNode.final = true\r\n    }\r\n\r\n    stack.push({\r\n      node: insertionNode,\r\n      editsRemaining: frame.editsRemaining - 1,\r\n      str: frame.str\r\n    })\r\n\r\n    // deletion\r\n    // can only do a deletion if we have enough edits remaining\r\n    // and if there are characters left to delete in the string\r\n    if (frame.str.length > 1) {\r\n      stack.push({\r\n        node: frame.node,\r\n        editsRemaining: frame.editsRemaining - 1,\r\n        str: frame.str.slice(1)\r\n      })\r\n    }\r\n\r\n    // deletion\r\n    // just removing the last character from the str\r\n    if (frame.str.length == 1) {\r\n      frame.node.final = true\r\n    }\r\n\r\n    // substitution\r\n    // can only do a substitution if we have enough edits remaining\r\n    // and if there are characters left to substitute\r\n    if (frame.str.length >= 1) {\r\n      if (\"*\" in frame.node.edges) {\r\n        var substitutionNode = frame.node.edges[\"*\"]\r\n      } else {\r\n        var substitutionNode = new lunr.TokenSet\r\n        frame.node.edges[\"*\"] = substitutionNode\r\n      }\r\n\r\n      if (frame.str.length == 1) {\r\n        substitutionNode.final = true\r\n      }\r\n\r\n      stack.push({\r\n        node: substitutionNode,\r\n        editsRemaining: frame.editsRemaining - 1,\r\n        str: frame.str.slice(1)\r\n      })\r\n    }\r\n\r\n    // transposition\r\n    // can only do a transposition if there are edits remaining\r\n    // and there are enough characters to transpose\r\n    if (frame.str.length > 1) {\r\n      var charA = frame.str.charAt(0),\r\n          charB = frame.str.charAt(1),\r\n          transposeNode\r\n\r\n      if (charB in frame.node.edges) {\r\n        transposeNode = frame.node.edges[charB]\r\n      } else {\r\n        transposeNode = new lunr.TokenSet\r\n        frame.node.edges[charB] = transposeNode\r\n      }\r\n\r\n      if (frame.str.length == 1) {\r\n        transposeNode.final = true\r\n      }\r\n\r\n      stack.push({\r\n        node: transposeNode,\r\n        editsRemaining: frame.editsRemaining - 1,\r\n        str: charA + frame.str.slice(2)\r\n      })\r\n    }\r\n  }\r\n\r\n  return root\r\n}\r\n\r\n/**\r\n * Creates a TokenSet from a string.\r\n *\r\n * The string may contain one or more wildcard characters (*)\r\n * that will allow wildcard matching when intersecting with\r\n * another TokenSet.\r\n *\r\n * @param {string} str - The string to create a TokenSet from.\r\n * @returns {lunr.TokenSet}\r\n */\r\nlunr.TokenSet.fromString = function (str) {\r\n  var node = new lunr.TokenSet,\r\n      root = node\r\n\r\n  /*\r\n   * Iterates through all characters within the passed string\r\n   * appending a node for each character.\r\n   *\r\n   * When a wildcard character is found then a self\r\n   * referencing edge is introduced to continually match\r\n   * any number of any characters.\r\n   */\r\n  for (var i = 0, len = str.length; i < len; i++) {\r\n    var char = str[i],\r\n        final = (i == len - 1)\r\n\r\n    if (char == \"*\") {\r\n      node.edges[char] = node\r\n      node.final = final\r\n\r\n    } else {\r\n      var next = new lunr.TokenSet\r\n      next.final = final\r\n\r\n      node.edges[char] = next\r\n      node = next\r\n    }\r\n  }\r\n\r\n  return root\r\n}\r\n\r\n/**\r\n * Converts this TokenSet into an array of strings\r\n * contained within the TokenSet.\r\n *\r\n * This is not intended to be used on a TokenSet that\r\n * contains wildcards, in these cases the results are\r\n * undefined and are likely to cause an infinite loop.\r\n *\r\n * @returns {string[]}\r\n */\r\nlunr.TokenSet.prototype.toArray = function () {\r\n  var words = []\r\n\r\n  var stack = [{\r\n    prefix: \"\",\r\n    node: this\r\n  }]\r\n\r\n  while (stack.length) {\r\n    var frame = stack.pop(),\r\n        edges = Object.keys(frame.node.edges),\r\n        len = edges.length\r\n\r\n    if (frame.node.final) {\r\n      /* In Safari, at this point the prefix is sometimes corrupted, see:\r\n       * https://github.com/olivernn/lunr.js/issues/279 Calling any\r\n       * String.prototype method forces Safari to \"cast\" this string to what\r\n       * it's supposed to be, fixing the bug. */\r\n      frame.prefix.charAt(0)\r\n      words.push(frame.prefix)\r\n    }\r\n\r\n    for (var i = 0; i < len; i++) {\r\n      var edge = edges[i]\r\n\r\n      stack.push({\r\n        prefix: frame.prefix.concat(edge),\r\n        node: frame.node.edges[edge]\r\n      })\r\n    }\r\n  }\r\n\r\n  return words\r\n}\r\n\r\n/**\r\n * Generates a string representation of a TokenSet.\r\n *\r\n * This is intended to allow TokenSets to be used as keys\r\n * in objects, largely to aid the construction and minimisation\r\n * of a TokenSet. As such it is not designed to be a human\r\n * friendly representation of the TokenSet.\r\n *\r\n * @returns {string}\r\n */\r\nlunr.TokenSet.prototype.toString = function () {\r\n  // NOTE: Using Object.keys here as this.edges is very likely\r\n  // to enter 'hash-mode' with many keys being added\r\n  //\r\n  // avoiding a for-in loop here as it leads to the function\r\n  // being de-optimised (at least in V8). From some simple\r\n  // benchmarks the performance is comparable, but allowing\r\n  // V8 to optimize may mean easy performance wins in the future.\r\n\r\n  if (this._str) {\r\n    return this._str\r\n  }\r\n\r\n  var str = this.final ? '1' : '0',\r\n      labels = Object.keys(this.edges).sort(),\r\n      len = labels.length\r\n\r\n  for (var i = 0; i < len; i++) {\r\n    var label = labels[i],\r\n        node = this.edges[label]\r\n\r\n    str = str + label + node.id\r\n  }\r\n\r\n  return str\r\n}\r\n\r\n/**\r\n * Returns a new TokenSet that is the intersection of\r\n * this TokenSet and the passed TokenSet.\r\n *\r\n * This intersection will take into account any wildcards\r\n * contained within the TokenSet.\r\n *\r\n * @param {lunr.TokenSet} b - An other TokenSet to intersect with.\r\n * @returns {lunr.TokenSet}\r\n */\r\nlunr.TokenSet.prototype.intersect = function (b) {\r\n  var output = new lunr.TokenSet,\r\n      frame = undefined\r\n\r\n  var stack = [{\r\n    qNode: b,\r\n    output: output,\r\n    node: this\r\n  }]\r\n\r\n  while (stack.length) {\r\n    frame = stack.pop()\r\n\r\n    // NOTE: As with the #toString method, we are using\r\n    // Object.keys and a for loop instead of a for-in loop\r\n    // as both of these objects enter 'hash' mode, causing\r\n    // the function to be de-optimised in V8\r\n    var qEdges = Object.keys(frame.qNode.edges),\r\n        qLen = qEdges.length,\r\n        nEdges = Object.keys(frame.node.edges),\r\n        nLen = nEdges.length\r\n\r\n    for (var q = 0; q < qLen; q++) {\r\n      var qEdge = qEdges[q]\r\n\r\n      for (var n = 0; n < nLen; n++) {\r\n        var nEdge = nEdges[n]\r\n\r\n        if (nEdge == qEdge || qEdge == '*') {\r\n          var node = frame.node.edges[nEdge],\r\n              qNode = frame.qNode.edges[qEdge],\r\n              final = node.final && qNode.final,\r\n              next = undefined\r\n\r\n          if (nEdge in frame.output.edges) {\r\n            // an edge already exists for this character\r\n            // no need to create a new node, just set the finality\r\n            // bit unless this node is already final\r\n            next = frame.output.edges[nEdge]\r\n            next.final = next.final || final\r\n\r\n          } else {\r\n            // no edge exists yet, must create one\r\n            // set the finality bit and insert it\r\n            // into the output\r\n            next = new lunr.TokenSet\r\n            next.final = final\r\n            frame.output.edges[nEdge] = next\r\n          }\r\n\r\n          stack.push({\r\n            qNode: qNode,\r\n            output: next,\r\n            node: node\r\n          })\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return output\r\n}\r\nlunr.TokenSet.Builder = function () {\r\n  this.previousWord = \"\"\r\n  this.root = new lunr.TokenSet\r\n  this.uncheckedNodes = []\r\n  this.minimizedNodes = {}\r\n}\r\n\r\nlunr.TokenSet.Builder.prototype.insert = function (word) {\r\n  var node,\r\n      commonPrefix = 0\r\n\r\n  if (word < this.previousWord) {\r\n    throw new Error (\"Out of order word insertion\")\r\n  }\r\n\r\n  for (var i = 0; i < word.length && i < this.previousWord.length; i++) {\r\n    if (word[i] != this.previousWord[i]) break\r\n    commonPrefix++\r\n  }\r\n\r\n  this.minimize(commonPrefix)\r\n\r\n  if (this.uncheckedNodes.length == 0) {\r\n    node = this.root\r\n  } else {\r\n    node = this.uncheckedNodes[this.uncheckedNodes.length - 1].child\r\n  }\r\n\r\n  for (var i = commonPrefix; i < word.length; i++) {\r\n    var nextNode = new lunr.TokenSet,\r\n        char = word[i]\r\n\r\n    node.edges[char] = nextNode\r\n\r\n    this.uncheckedNodes.push({\r\n      parent: node,\r\n      char: char,\r\n      child: nextNode\r\n    })\r\n\r\n    node = nextNode\r\n  }\r\n\r\n  node.final = true\r\n  this.previousWord = word\r\n}\r\n\r\nlunr.TokenSet.Builder.prototype.finish = function () {\r\n  this.minimize(0)\r\n}\r\n\r\nlunr.TokenSet.Builder.prototype.minimize = function (downTo) {\r\n  for (var i = this.uncheckedNodes.length - 1; i >= downTo; i--) {\r\n    var node = this.uncheckedNodes[i],\r\n        childKey = node.child.toString()\r\n\r\n    if (childKey in this.minimizedNodes) {\r\n      node.parent.edges[node.char] = this.minimizedNodes[childKey]\r\n    } else {\r\n      // Cache the key for this node since\r\n      // we know it can't change anymore\r\n      node.child._str = childKey\r\n\r\n      this.minimizedNodes[childKey] = node.child\r\n    }\r\n\r\n    this.uncheckedNodes.pop()\r\n  }\r\n}\r\n/*!\r\n * lunr.Index\r\n * Copyright (C) 2020 Oliver Nightingale\r\n */\r\n\r\n/**\r\n * An index contains the built index of all documents and provides a query interface\r\n * to the index.\r\n *\r\n * Usually instances of lunr.Index will not be created using this constructor, instead\r\n * lunr.Builder should be used to construct new indexes, or lunr.Index.load should be\r\n * used to load previously built and serialized indexes.\r\n *\r\n * @constructor\r\n * @param {Object} attrs - The attributes of the built search index.\r\n * @param {Object} attrs.invertedIndex - An index of term/field to document reference.\r\n * @param {Object<string, lunr.Vector>} attrs.fieldVectors - Field vectors\r\n * @param {lunr.TokenSet} attrs.tokenSet - An set of all corpus tokens.\r\n * @param {string[]} attrs.fields - The names of indexed document fields.\r\n * @param {lunr.Pipeline} attrs.pipeline - The pipeline to use for search terms.\r\n */\r\nlunr.Index = function (attrs) {\r\n  this.invertedIndex = attrs.invertedIndex\r\n  this.fieldVectors = attrs.fieldVectors\r\n  this.tokenSet = attrs.tokenSet\r\n  this.fields = attrs.fields\r\n  this.pipeline = attrs.pipeline\r\n}\r\n\r\n/**\r\n * A result contains details of a document matching a search query.\r\n * @typedef {Object} lunr.Index~Result\r\n * @property {string} ref - The reference of the document this result represents.\r\n * @property {number} score - A number between 0 and 1 representing how similar this document is to the query.\r\n * @property {lunr.MatchData} matchData - Contains metadata about this match including which term(s) caused the match.\r\n */\r\n\r\n/**\r\n * Although lunr provides the ability to create queries using lunr.Query, it also provides a simple\r\n * query language which itself is parsed into an instance of lunr.Query.\r\n *\r\n * For programmatically building queries it is advised to directly use lunr.Query, the query language\r\n * is best used for human entered text rather than program generated text.\r\n *\r\n * At its simplest queries can just be a single term, e.g. `hello`, multiple terms are also supported\r\n * and will be combined with OR, e.g `hello world` will match documents that contain either 'hello'\r\n * or 'world', though those that contain both will rank higher in the results.\r\n *\r\n * Wildcards can be included in terms to match one or more unspecified characters, these wildcards can\r\n * be inserted anywhere within the term, and more than one wildcard can exist in a single term. Adding\r\n * wildcards will increase the number of documents that will be found but can also have a negative\r\n * impact on query performance, especially with wildcards at the beginning of a term.\r\n *\r\n * Terms can be restricted to specific fields, e.g. `title:hello`, only documents with the term\r\n * hello in the title field will match this query. Using a field not present in the index will lead\r\n * to an error being thrown.\r\n *\r\n * Modifiers can also be added to terms, lunr supports edit distance and boost modifiers on terms. A term\r\n * boost will make documents matching that term score higher, e.g. `foo^5`. Edit distance is also supported\r\n * to provide fuzzy matching, e.g. 'hello~2' will match documents with hello with an edit distance of 2.\r\n * Avoid large values for edit distance to improve query performance.\r\n *\r\n * Each term also supports a presence modifier. By default a term's presence in document is optional, however\r\n * this can be changed to either required or prohibited. For a term's presence to be required in a document the\r\n * term should be prefixed with a '+', e.g. `+foo bar` is a search for documents that must contain 'foo' and\r\n * optionally contain 'bar'. Conversely a leading '-' sets the terms presence to prohibited, i.e. it must not\r\n * appear in a document, e.g. `-foo bar` is a search for documents that do not contain 'foo' but may contain 'bar'.\r\n *\r\n * To escape special characters the backslash character '\\' can be used, this allows searches to include\r\n * characters that would normally be considered modifiers, e.g. `foo\\~2` will search for a term \"foo~2\" instead\r\n * of attempting to apply a boost of 2 to the search term \"foo\".\r\n *\r\n * @typedef {string} lunr.Index~QueryString\r\n * @example <caption>Simple single term query</caption>\r\n * hello\r\n * @example <caption>Multiple term query</caption>\r\n * hello world\r\n * @example <caption>term scoped to a field</caption>\r\n * title:hello\r\n * @example <caption>term with a boost of 10</caption>\r\n * hello^10\r\n * @example <caption>term with an edit distance of 2</caption>\r\n * hello~2\r\n * @example <caption>terms with presence modifiers</caption>\r\n * -foo +bar baz\r\n */\r\n\r\n/**\r\n * Performs a search against the index using lunr query syntax.\r\n *\r\n * Results will be returned sorted by their score, the most relevant results\r\n * will be returned first.  For details on how the score is calculated, please see\r\n * the {@link https://lunrjs.com/guides/searching.html#scoring|guide}.\r\n *\r\n * For more programmatic querying use lunr.Index#query.\r\n *\r\n * @param {lunr.Index~QueryString} queryString - A string containing a lunr query.\r\n * @throws {lunr.QueryParseError} If the passed query string cannot be parsed.\r\n * @returns {lunr.Index~Result[]}\r\n */\r\nlunr.Index.prototype.search = function (queryString) {\r\n  return this.query(function (query) {\r\n    var parser = new lunr.QueryParser(queryString, query)\r\n    parser.parse()\r\n  })\r\n}\r\n\r\n/**\r\n * A query builder callback provides a query object to be used to express\r\n * the query to perform on the index.\r\n *\r\n * @callback lunr.Index~queryBuilder\r\n * @param {lunr.Query} query - The query object to build up.\r\n * @this lunr.Query\r\n */\r\n\r\n/**\r\n * Performs a query against the index using the yielded lunr.Query object.\r\n *\r\n * If performing programmatic queries against the index, this method is preferred\r\n * over lunr.Index#search so as to avoid the additional query parsing overhead.\r\n *\r\n * A query object is yielded to the supplied function which should be used to\r\n * express the query to be run against the index.\r\n *\r\n * Note that although this function takes a callback parameter it is _not_ an\r\n * asynchronous operation, the callback is just yielded a query object to be\r\n * customized.\r\n *\r\n * @param {lunr.Index~queryBuilder} fn - A function that is used to build the query.\r\n * @returns {lunr.Index~Result[]}\r\n */\r\nlunr.Index.prototype.query = function (fn) {\r\n  // for each query clause\r\n  // * process terms\r\n  // * expand terms from token set\r\n  // * find matching documents and metadata\r\n  // * get document vectors\r\n  // * score documents\r\n\r\n  var query = new lunr.Query(this.fields),\r\n      matchingFields = Object.create(null),\r\n      queryVectors = Object.create(null),\r\n      termFieldCache = Object.create(null),\r\n      requiredMatches = Object.create(null),\r\n      prohibitedMatches = Object.create(null)\r\n\r\n  /*\r\n   * To support field level boosts a query vector is created per\r\n   * field. An empty vector is eagerly created to support negated\r\n   * queries.\r\n   */\r\n  for (var i = 0; i < this.fields.length; i++) {\r\n    queryVectors[this.fields[i]] = new lunr.Vector\r\n  }\r\n\r\n  fn.call(query, query)\r\n\r\n  for (var i = 0; i < query.clauses.length; i++) {\r\n    /*\r\n     * Unless the pipeline has been disabled for this term, which is\r\n     * the case for terms with wildcards, we need to pass the clause\r\n     * term through the search pipeline. A pipeline returns an array\r\n     * of processed terms. Pipeline functions may expand the passed\r\n     * term, which means we may end up performing multiple index lookups\r\n     * for a single query term.\r\n     */\r\n    var clause = query.clauses[i],\r\n        terms = null,\r\n        clauseMatches = lunr.Set.empty\r\n\r\n    if (clause.usePipeline) {\r\n      terms = this.pipeline.runString(clause.term, {\r\n        fields: clause.fields\r\n      })\r\n    } else {\r\n      terms = [clause.term]\r\n    }\r\n\r\n    for (var m = 0; m < terms.length; m++) {\r\n      var term = terms[m]\r\n\r\n      /*\r\n       * Each term returned from the pipeline needs to use the same query\r\n       * clause object, e.g. the same boost and or edit distance. The\r\n       * simplest way to do this is to re-use the clause object but mutate\r\n       * its term property.\r\n       */\r\n      clause.term = term\r\n\r\n      /*\r\n       * From the term in the clause we create a token set which will then\r\n       * be used to intersect the indexes token set to get a list of terms\r\n       * to lookup in the inverted index\r\n       */\r\n      var termTokenSet = lunr.TokenSet.fromClause(clause),\r\n          expandedTerms = this.tokenSet.intersect(termTokenSet).toArray()\r\n\r\n      /*\r\n       * If a term marked as required does not exist in the tokenSet it is\r\n       * impossible for the search to return any matches. We set all the field\r\n       * scoped required matches set to empty and stop examining any further\r\n       * clauses.\r\n       */\r\n      if (expandedTerms.length === 0 && clause.presence === lunr.Query.presence.REQUIRED) {\r\n        for (var k = 0; k < clause.fields.length; k++) {\r\n          var field = clause.fields[k]\r\n          requiredMatches[field] = lunr.Set.empty\r\n        }\r\n\r\n        break\r\n      }\r\n\r\n      for (var j = 0; j < expandedTerms.length; j++) {\r\n        /*\r\n         * For each term get the posting and termIndex, this is required for\r\n         * building the query vector.\r\n         */\r\n        var expandedTerm = expandedTerms[j],\r\n            posting = this.invertedIndex[expandedTerm],\r\n            termIndex = posting._index\r\n\r\n        for (var k = 0; k < clause.fields.length; k++) {\r\n          /*\r\n           * For each field that this query term is scoped by (by default\r\n           * all fields are in scope) we need to get all the document refs\r\n           * that have this term in that field.\r\n           *\r\n           * The posting is the entry in the invertedIndex for the matching\r\n           * term from above.\r\n           */\r\n          var field = clause.fields[k],\r\n              fieldPosting = posting[field],\r\n              matchingDocumentRefs = Object.keys(fieldPosting),\r\n              termField = expandedTerm + \"/\" + field,\r\n              matchingDocumentsSet = new lunr.Set(matchingDocumentRefs)\r\n\r\n          /*\r\n           * if the presence of this term is required ensure that the matching\r\n           * documents are added to the set of required matches for this clause.\r\n           *\r\n           */\r\n          if (clause.presence == lunr.Query.presence.REQUIRED) {\r\n            clauseMatches = clauseMatches.union(matchingDocumentsSet)\r\n\r\n            if (requiredMatches[field] === undefined) {\r\n              requiredMatches[field] = lunr.Set.complete\r\n            }\r\n          }\r\n\r\n          /*\r\n           * if the presence of this term is prohibited ensure that the matching\r\n           * documents are added to the set of prohibited matches for this field,\r\n           * creating that set if it does not yet exist.\r\n           */\r\n          if (clause.presence == lunr.Query.presence.PROHIBITED) {\r\n            if (prohibitedMatches[field] === undefined) {\r\n              prohibitedMatches[field] = lunr.Set.empty\r\n            }\r\n\r\n            prohibitedMatches[field] = prohibitedMatches[field].union(matchingDocumentsSet)\r\n\r\n            /*\r\n             * Prohibited matches should not be part of the query vector used for\r\n             * similarity scoring and no metadata should be extracted so we continue\r\n             * to the next field\r\n             */\r\n            continue\r\n          }\r\n\r\n          /*\r\n           * The query field vector is populated using the termIndex found for\r\n           * the term and a unit value with the appropriate boost applied.\r\n           * Using upsert because there could already be an entry in the vector\r\n           * for the term we are working with. In that case we just add the scores\r\n           * together.\r\n           */\r\n          queryVectors[field].upsert(termIndex, clause.boost, function (a, b) { return a + b })\r\n\r\n          /**\r\n           * If we've already seen this term, field combo then we've already collected\r\n           * the matching documents and metadata, no need to go through all that again\r\n           */\r\n          if (termFieldCache[termField]) {\r\n            continue\r\n          }\r\n\r\n          for (var l = 0; l < matchingDocumentRefs.length; l++) {\r\n            /*\r\n             * All metadata for this term/field/document triple\r\n             * are then extracted and collected into an instance\r\n             * of lunr.MatchData ready to be returned in the query\r\n             * results\r\n             */\r\n            var matchingDocumentRef = matchingDocumentRefs[l],\r\n                matchingFieldRef = new lunr.FieldRef (matchingDocumentRef, field),\r\n                metadata = fieldPosting[matchingDocumentRef],\r\n                fieldMatch\r\n\r\n            if ((fieldMatch = matchingFields[matchingFieldRef]) === undefined) {\r\n              matchingFields[matchingFieldRef] = new lunr.MatchData (expandedTerm, field, metadata)\r\n            } else {\r\n              fieldMatch.add(expandedTerm, field, metadata)\r\n            }\r\n\r\n          }\r\n\r\n          termFieldCache[termField] = true\r\n        }\r\n      }\r\n    }\r\n\r\n    /**\r\n     * If the presence was required we need to update the requiredMatches field sets.\r\n     * We do this after all fields for the term have collected their matches because\r\n     * the clause terms presence is required in _any_ of the fields not _all_ of the\r\n     * fields.\r\n     */\r\n    if (clause.presence === lunr.Query.presence.REQUIRED) {\r\n      for (var k = 0; k < clause.fields.length; k++) {\r\n        var field = clause.fields[k]\r\n        requiredMatches[field] = requiredMatches[field].intersect(clauseMatches)\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Need to combine the field scoped required and prohibited\r\n   * matching documents into a global set of required and prohibited\r\n   * matches\r\n   */\r\n  var allRequiredMatches = lunr.Set.complete,\r\n      allProhibitedMatches = lunr.Set.empty\r\n\r\n  for (var i = 0; i < this.fields.length; i++) {\r\n    var field = this.fields[i]\r\n\r\n    if (requiredMatches[field]) {\r\n      allRequiredMatches = allRequiredMatches.intersect(requiredMatches[field])\r\n    }\r\n\r\n    if (prohibitedMatches[field]) {\r\n      allProhibitedMatches = allProhibitedMatches.union(prohibitedMatches[field])\r\n    }\r\n  }\r\n\r\n  var matchingFieldRefs = Object.keys(matchingFields),\r\n      results = [],\r\n      matches = Object.create(null)\r\n\r\n  /*\r\n   * If the query is negated (contains only prohibited terms)\r\n   * we need to get _all_ fieldRefs currently existing in the\r\n   * index. This is only done when we know that the query is\r\n   * entirely prohibited terms to avoid any cost of getting all\r\n   * fieldRefs unnecessarily.\r\n   *\r\n   * Additionally, blank MatchData must be created to correctly\r\n   * populate the results.\r\n   */\r\n  if (query.isNegated()) {\r\n    matchingFieldRefs = Object.keys(this.fieldVectors)\r\n\r\n    for (var i = 0; i < matchingFieldRefs.length; i++) {\r\n      var matchingFieldRef = matchingFieldRefs[i]\r\n      var fieldRef = lunr.FieldRef.fromString(matchingFieldRef)\r\n      matchingFields[matchingFieldRef] = new lunr.MatchData\r\n    }\r\n  }\r\n\r\n  for (var i = 0; i < matchingFieldRefs.length; i++) {\r\n    /*\r\n     * Currently we have document fields that match the query, but we\r\n     * need to return documents. The matchData and scores are combined\r\n     * from multiple fields belonging to the same document.\r\n     *\r\n     * Scores are calculated by field, using the query vectors created\r\n     * above, and combined into a final document score using addition.\r\n     */\r\n    var fieldRef = lunr.FieldRef.fromString(matchingFieldRefs[i]),\r\n        docRef = fieldRef.docRef\r\n\r\n    if (!allRequiredMatches.contains(docRef)) {\r\n      continue\r\n    }\r\n\r\n    if (allProhibitedMatches.contains(docRef)) {\r\n      continue\r\n    }\r\n\r\n    var fieldVector = this.fieldVectors[fieldRef],\r\n        score = queryVectors[fieldRef.fieldName].similarity(fieldVector),\r\n        docMatch\r\n\r\n    if ((docMatch = matches[docRef]) !== undefined) {\r\n      docMatch.score += score\r\n      docMatch.matchData.combine(matchingFields[fieldRef])\r\n    } else {\r\n      var match = {\r\n        ref: docRef,\r\n        score: score,\r\n        matchData: matchingFields[fieldRef]\r\n      }\r\n      matches[docRef] = match\r\n      results.push(match)\r\n    }\r\n  }\r\n\r\n  /*\r\n   * Sort the results objects by score, highest first.\r\n   */\r\n  return results.sort(function (a, b) {\r\n    return b.score - a.score\r\n  })\r\n}\r\n\r\n/**\r\n * Prepares the index for JSON serialization.\r\n *\r\n * The schema for this JSON blob will be described in a\r\n * separate JSON schema file.\r\n *\r\n * @returns {Object}\r\n */\r\nlunr.Index.prototype.toJSON = function () {\r\n  var invertedIndex = Object.keys(this.invertedIndex)\r\n    .sort()\r\n    .map(function (term) {\r\n      return [term, this.invertedIndex[term]]\r\n    }, this)\r\n\r\n  var fieldVectors = Object.keys(this.fieldVectors)\r\n    .map(function (ref) {\r\n      return [ref, this.fieldVectors[ref].toJSON()]\r\n    }, this)\r\n\r\n  return {\r\n    version: lunr.version,\r\n    fields: this.fields,\r\n    fieldVectors: fieldVectors,\r\n    invertedIndex: invertedIndex,\r\n    pipeline: this.pipeline.toJSON()\r\n  }\r\n}\r\n\r\n/**\r\n * Loads a previously serialized lunr.Index\r\n *\r\n * @param {Object} serializedIndex - A previously serialized lunr.Index\r\n * @returns {lunr.Index}\r\n */\r\nlunr.Index.load = function (serializedIndex) {\r\n  var attrs = {},\r\n      fieldVectors = {},\r\n      serializedVectors = serializedIndex.fieldVectors,\r\n      invertedIndex = Object.create(null),\r\n      serializedInvertedIndex = serializedIndex.invertedIndex,\r\n      tokenSetBuilder = new lunr.TokenSet.Builder,\r\n      pipeline = lunr.Pipeline.load(serializedIndex.pipeline)\r\n\r\n  if (serializedIndex.version != lunr.version) {\r\n    lunr.utils.warn(\"Version mismatch when loading serialised index. Current version of lunr '\" + lunr.version + \"' does not match serialized index '\" + serializedIndex.version + \"'\")\r\n  }\r\n\r\n  for (var i = 0; i < serializedVectors.length; i++) {\r\n    var tuple = serializedVectors[i],\r\n        ref = tuple[0],\r\n        elements = tuple[1]\r\n\r\n    fieldVectors[ref] = new lunr.Vector(elements)\r\n  }\r\n\r\n  for (var i = 0; i < serializedInvertedIndex.length; i++) {\r\n    var tuple = serializedInvertedIndex[i],\r\n        term = tuple[0],\r\n        posting = tuple[1]\r\n\r\n    tokenSetBuilder.insert(term)\r\n    invertedIndex[term] = posting\r\n  }\r\n\r\n  tokenSetBuilder.finish()\r\n\r\n  attrs.fields = serializedIndex.fields\r\n\r\n  attrs.fieldVectors = fieldVectors\r\n  attrs.invertedIndex = invertedIndex\r\n  attrs.tokenSet = tokenSetBuilder.root\r\n  attrs.pipeline = pipeline\r\n\r\n  return new lunr.Index(attrs)\r\n}\r\n/*!\r\n * lunr.Builder\r\n * Copyright (C) 2020 Oliver Nightingale\r\n */\r\n\r\n/**\r\n * lunr.Builder performs indexing on a set of documents and\r\n * returns instances of lunr.Index ready for querying.\r\n *\r\n * All configuration of the index is done via the builder, the\r\n * fields to index, the document reference, the text processing\r\n * pipeline and document scoring parameters are all set on the\r\n * builder before indexing.\r\n *\r\n * @constructor\r\n * @property {string} _ref - Internal reference to the document reference field.\r\n * @property {string[]} _fields - Internal reference to the document fields to index.\r\n * @property {object} invertedIndex - The inverted index maps terms to document fields.\r\n * @property {object} documentTermFrequencies - Keeps track of document term frequencies.\r\n * @property {object} documentLengths - Keeps track of the length of documents added to the index.\r\n * @property {lunr.tokenizer} tokenizer - Function for splitting strings into tokens for indexing.\r\n * @property {lunr.Pipeline} pipeline - The pipeline performs text processing on tokens before indexing.\r\n * @property {lunr.Pipeline} searchPipeline - A pipeline for processing search terms before querying the index.\r\n * @property {number} documentCount - Keeps track of the total number of documents indexed.\r\n * @property {number} _b - A parameter to control field length normalization, setting this to 0 disabled normalization, 1 fully normalizes field lengths, the default value is 0.75.\r\n * @property {number} _k1 - A parameter to control how quickly an increase in term frequency results in term frequency saturation, the default value is 1.2.\r\n * @property {number} termIndex - A counter incremented for each unique term, used to identify a terms position in the vector space.\r\n * @property {array} metadataWhitelist - A list of metadata keys that have been whitelisted for entry in the index.\r\n */\r\nlunr.Builder = function () {\r\n  this._ref = \"id\"\r\n  this._fields = Object.create(null)\r\n  this._documents = Object.create(null)\r\n  this.invertedIndex = Object.create(null)\r\n  this.fieldTermFrequencies = {}\r\n  this.fieldLengths = {}\r\n  this.tokenizer = lunr.tokenizer\r\n  this.pipeline = new lunr.Pipeline\r\n  this.searchPipeline = new lunr.Pipeline\r\n  this.documentCount = 0\r\n  this._b = 0.75\r\n  this._k1 = 1.2\r\n  this.termIndex = 0\r\n  this.metadataWhitelist = []\r\n}\r\n\r\n/**\r\n * Sets the document field used as the document reference. Every document must have this field.\r\n * The type of this field in the document should be a string, if it is not a string it will be\r\n * coerced into a string by calling toString.\r\n *\r\n * The default ref is 'id'.\r\n *\r\n * The ref should _not_ be changed during indexing, it should be set before any documents are\r\n * added to the index. Changing it during indexing can lead to inconsistent results.\r\n *\r\n * @param {string} ref - The name of the reference field in the document.\r\n */\r\nlunr.Builder.prototype.ref = function (ref) {\r\n  this._ref = ref\r\n}\r\n\r\n/**\r\n * A function that is used to extract a field from a document.\r\n *\r\n * Lunr expects a field to be at the top level of a document, if however the field\r\n * is deeply nested within a document an extractor function can be used to extract\r\n * the right field for indexing.\r\n *\r\n * @callback fieldExtractor\r\n * @param {object} doc - The document being added to the index.\r\n * @returns {?(string|object|object[])} obj - The object that will be indexed for this field.\r\n * @example <caption>Extracting a nested field</caption>\r\n * function (doc) { return doc.nested.field }\r\n */\r\n\r\n/**\r\n * Adds a field to the list of document fields that will be indexed. Every document being\r\n * indexed should have this field. Null values for this field in indexed documents will\r\n * not cause errors but will limit the chance of that document being retrieved by searches.\r\n *\r\n * All fields should be added before adding documents to the index. Adding fields after\r\n * a document has been indexed will have no effect on already indexed documents.\r\n *\r\n * Fields can be boosted at build time. This allows terms within that field to have more\r\n * importance when ranking search results. Use a field boost to specify that matches within\r\n * one field are more important than other fields.\r\n *\r\n * @param {string} fieldName - The name of a field to index in all documents.\r\n * @param {object} attributes - Optional attributes associated with this field.\r\n * @param {number} [attributes.boost=1] - Boost applied to all terms within this field.\r\n * @param {fieldExtractor} [attributes.extractor] - Function to extract a field from a document.\r\n * @throws {RangeError} fieldName cannot contain unsupported characters '/'\r\n */\r\nlunr.Builder.prototype.field = function (fieldName, attributes) {\r\n  if (/\\//.test(fieldName)) {\r\n    throw new RangeError (\"Field '\" + fieldName + \"' contains illegal character '/'\")\r\n  }\r\n\r\n  this._fields[fieldName] = attributes || {}\r\n}\r\n\r\n/**\r\n * A parameter to tune the amount of field length normalisation that is applied when\r\n * calculating relevance scores. A value of 0 will completely disable any normalisation\r\n * and a value of 1 will fully normalise field lengths. The default is 0.75. Values of b\r\n * will be clamped to the range 0 - 1.\r\n *\r\n * @param {number} number - The value to set for this tuning parameter.\r\n */\r\nlunr.Builder.prototype.b = function (number) {\r\n  if (number < 0) {\r\n    this._b = 0\r\n  } else if (number > 1) {\r\n    this._b = 1\r\n  } else {\r\n    this._b = number\r\n  }\r\n}\r\n\r\n/**\r\n * A parameter that controls the speed at which a rise in term frequency results in term\r\n * frequency saturation. The default value is 1.2. Setting this to a higher value will give\r\n * slower saturation levels, a lower value will result in quicker saturation.\r\n *\r\n * @param {number} number - The value to set for this tuning parameter.\r\n */\r\nlunr.Builder.prototype.k1 = function (number) {\r\n  this._k1 = number\r\n}\r\n\r\n/**\r\n * Adds a document to the index.\r\n *\r\n * Before adding fields to the index the index should have been fully setup, with the document\r\n * ref and all fields to index already having been specified.\r\n *\r\n * The document must have a field name as specified by the ref (by default this is 'id') and\r\n * it should have all fields defined for indexing, though null or undefined values will not\r\n * cause errors.\r\n *\r\n * Entire documents can be boosted at build time. Applying a boost to a document indicates that\r\n * this document should rank higher in search results than other documents.\r\n *\r\n * @param {object} doc - The document to add to the index.\r\n * @param {object} attributes - Optional attributes associated with this document.\r\n * @param {number} [attributes.boost=1] - Boost applied to all terms within this document.\r\n */\r\nlunr.Builder.prototype.add = function (doc, attributes) {\r\n  var docRef = doc[this._ref],\r\n      fields = Object.keys(this._fields)\r\n\r\n  this._documents[docRef] = attributes || {}\r\n  this.documentCount += 1\r\n\r\n  for (var i = 0; i < fields.length; i++) {\r\n    var fieldName = fields[i],\r\n        extractor = this._fields[fieldName].extractor,\r\n        field = extractor ? extractor(doc) : doc[fieldName],\r\n        tokens = this.tokenizer(field, {\r\n          fields: [fieldName]\r\n        }),\r\n        terms = this.pipeline.run(tokens),\r\n        fieldRef = new lunr.FieldRef (docRef, fieldName),\r\n        fieldTerms = Object.create(null)\r\n\r\n    this.fieldTermFrequencies[fieldRef] = fieldTerms\r\n    this.fieldLengths[fieldRef] = 0\r\n\r\n    // store the length of this field for this document\r\n    this.fieldLengths[fieldRef] += terms.length\r\n\r\n    // calculate term frequencies for this field\r\n    for (var j = 0; j < terms.length; j++) {\r\n      var term = terms[j]\r\n\r\n      if (fieldTerms[term] == undefined) {\r\n        fieldTerms[term] = 0\r\n      }\r\n\r\n      fieldTerms[term] += 1\r\n\r\n      // add to inverted index\r\n      // create an initial posting if one doesn't exist\r\n      if (this.invertedIndex[term] == undefined) {\r\n        var posting = Object.create(null)\r\n        posting[\"_index\"] = this.termIndex\r\n        this.termIndex += 1\r\n\r\n        for (var k = 0; k < fields.length; k++) {\r\n          posting[fields[k]] = Object.create(null)\r\n        }\r\n\r\n        this.invertedIndex[term] = posting\r\n      }\r\n\r\n      // add an entry for this term/fieldName/docRef to the invertedIndex\r\n      if (this.invertedIndex[term][fieldName][docRef] == undefined) {\r\n        this.invertedIndex[term][fieldName][docRef] = Object.create(null)\r\n      }\r\n\r\n      // store all whitelisted metadata about this token in the\r\n      // inverted index\r\n      for (var l = 0; l < this.metadataWhitelist.length; l++) {\r\n        var metadataKey = this.metadataWhitelist[l],\r\n            metadata = term.metadata[metadataKey]\r\n\r\n        if (this.invertedIndex[term][fieldName][docRef][metadataKey] == undefined) {\r\n          this.invertedIndex[term][fieldName][docRef][metadataKey] = []\r\n        }\r\n\r\n        this.invertedIndex[term][fieldName][docRef][metadataKey].push(metadata)\r\n      }\r\n    }\r\n\r\n  }\r\n}\r\n\r\n/**\r\n * Calculates the average document length for this index\r\n *\r\n * @private\r\n */\r\nlunr.Builder.prototype.calculateAverageFieldLengths = function () {\r\n\r\n  var fieldRefs = Object.keys(this.fieldLengths),\r\n      numberOfFields = fieldRefs.length,\r\n      accumulator = {},\r\n      documentsWithField = {}\r\n\r\n  for (var i = 0; i < numberOfFields; i++) {\r\n    var fieldRef = lunr.FieldRef.fromString(fieldRefs[i]),\r\n        field = fieldRef.fieldName\r\n\r\n    documentsWithField[field] || (documentsWithField[field] = 0)\r\n    documentsWithField[field] += 1\r\n\r\n    accumulator[field] || (accumulator[field] = 0)\r\n    accumulator[field] += this.fieldLengths[fieldRef]\r\n  }\r\n\r\n  var fields = Object.keys(this._fields)\r\n\r\n  for (var i = 0; i < fields.length; i++) {\r\n    var fieldName = fields[i]\r\n    accumulator[fieldName] = accumulator[fieldName] / documentsWithField[fieldName]\r\n  }\r\n\r\n  this.averageFieldLength = accumulator\r\n}\r\n\r\n/**\r\n * Builds a vector space model of every document using lunr.Vector\r\n *\r\n * @private\r\n */\r\nlunr.Builder.prototype.createFieldVectors = function () {\r\n  var fieldVectors = {},\r\n      fieldRefs = Object.keys(this.fieldTermFrequencies),\r\n      fieldRefsLength = fieldRefs.length,\r\n      termIdfCache = Object.create(null)\r\n\r\n  for (var i = 0; i < fieldRefsLength; i++) {\r\n    var fieldRef = lunr.FieldRef.fromString(fieldRefs[i]),\r\n        fieldName = fieldRef.fieldName,\r\n        fieldLength = this.fieldLengths[fieldRef],\r\n        fieldVector = new lunr.Vector,\r\n        termFrequencies = this.fieldTermFrequencies[fieldRef],\r\n        terms = Object.keys(termFrequencies),\r\n        termsLength = terms.length\r\n\r\n\r\n    var fieldBoost = this._fields[fieldName].boost || 1,\r\n        docBoost = this._documents[fieldRef.docRef].boost || 1\r\n\r\n    for (var j = 0; j < termsLength; j++) {\r\n      var term = terms[j],\r\n          tf = termFrequencies[term],\r\n          termIndex = this.invertedIndex[term]._index,\r\n          idf, score, scoreWithPrecision\r\n\r\n      if (termIdfCache[term] === undefined) {\r\n        idf = lunr.idf(this.invertedIndex[term], this.documentCount)\r\n        termIdfCache[term] = idf\r\n      } else {\r\n        idf = termIdfCache[term]\r\n      }\r\n\r\n      score = idf * ((this._k1 + 1) * tf) / (this._k1 * (1 - this._b + this._b * (fieldLength / this.averageFieldLength[fieldName])) + tf)\r\n      score *= fieldBoost\r\n      score *= docBoost\r\n      scoreWithPrecision = Math.round(score * 1000) / 1000\r\n      // Converts 1.23456789 to 1.234.\r\n      // Reducing the precision so that the vectors take up less\r\n      // space when serialised. Doing it now so that they behave\r\n      // the same before and after serialisation. Also, this is\r\n      // the fastest approach to reducing a number's precision in\r\n      // JavaScript.\r\n\r\n      fieldVector.insert(termIndex, scoreWithPrecision)\r\n    }\r\n\r\n    fieldVectors[fieldRef] = fieldVector\r\n  }\r\n\r\n  this.fieldVectors = fieldVectors\r\n}\r\n\r\n/**\r\n * Creates a token set of all tokens in the index using lunr.TokenSet\r\n *\r\n * @private\r\n */\r\nlunr.Builder.prototype.createTokenSet = function () {\r\n  this.tokenSet = lunr.TokenSet.fromArray(\r\n    Object.keys(this.invertedIndex).sort()\r\n  )\r\n}\r\n\r\n/**\r\n * Builds the index, creating an instance of lunr.Index.\r\n *\r\n * This completes the indexing process and should only be called\r\n * once all documents have been added to the index.\r\n *\r\n * @returns {lunr.Index}\r\n */\r\nlunr.Builder.prototype.build = function () {\r\n  this.calculateAverageFieldLengths()\r\n  this.createFieldVectors()\r\n  this.createTokenSet()\r\n\r\n  return new lunr.Index({\r\n    invertedIndex: this.invertedIndex,\r\n    fieldVectors: this.fieldVectors,\r\n    tokenSet: this.tokenSet,\r\n    fields: Object.keys(this._fields),\r\n    pipeline: this.searchPipeline\r\n  })\r\n}\r\n\r\n/**\r\n * Applies a plugin to the index builder.\r\n *\r\n * A plugin is a function that is called with the index builder as its context.\r\n * Plugins can be used to customise or extend the behaviour of the index\r\n * in some way. A plugin is just a function, that encapsulated the custom\r\n * behaviour that should be applied when building the index.\r\n *\r\n * The plugin function will be called with the index builder as its argument, additional\r\n * arguments can also be passed when calling use. The function will be called\r\n * with the index builder as its context.\r\n *\r\n * @param {Function} plugin The plugin to apply.\r\n */\r\nlunr.Builder.prototype.use = function (fn) {\r\n  var args = Array.prototype.slice.call(arguments, 1)\r\n  args.unshift(this)\r\n  fn.apply(this, args)\r\n}\r\n/**\r\n * Contains and collects metadata about a matching document.\r\n * A single instance of lunr.MatchData is returned as part of every\r\n * lunr.Index~Result.\r\n *\r\n * @constructor\r\n * @param {string} term - The term this match data is associated with\r\n * @param {string} field - The field in which the term was found\r\n * @param {object} metadata - The metadata recorded about this term in this field\r\n * @property {object} metadata - A cloned collection of metadata associated with this document.\r\n * @see {@link lunr.Index~Result}\r\n */\r\nlunr.MatchData = function (term, field, metadata) {\r\n  var clonedMetadata = Object.create(null),\r\n      metadataKeys = Object.keys(metadata || {})\r\n\r\n  // Cloning the metadata to prevent the original\r\n  // being mutated during match data combination.\r\n  // Metadata is kept in an array within the inverted\r\n  // index so cloning the data can be done with\r\n  // Array#slice\r\n  for (var i = 0; i < metadataKeys.length; i++) {\r\n    var key = metadataKeys[i]\r\n    clonedMetadata[key] = metadata[key].slice()\r\n  }\r\n\r\n  this.metadata = Object.create(null)\r\n\r\n  if (term !== undefined) {\r\n    this.metadata[term] = Object.create(null)\r\n    this.metadata[term][field] = clonedMetadata\r\n  }\r\n}\r\n\r\n/**\r\n * An instance of lunr.MatchData will be created for every term that matches a\r\n * document. However only one instance is required in a lunr.Index~Result. This\r\n * method combines metadata from another instance of lunr.MatchData with this\r\n * objects metadata.\r\n *\r\n * @param {lunr.MatchData} otherMatchData - Another instance of match data to merge with this one.\r\n * @see {@link lunr.Index~Result}\r\n */\r\nlunr.MatchData.prototype.combine = function (otherMatchData) {\r\n  var terms = Object.keys(otherMatchData.metadata)\r\n\r\n  for (var i = 0; i < terms.length; i++) {\r\n    var term = terms[i],\r\n        fields = Object.keys(otherMatchData.metadata[term])\r\n\r\n    if (this.metadata[term] == undefined) {\r\n      this.metadata[term] = Object.create(null)\r\n    }\r\n\r\n    for (var j = 0; j < fields.length; j++) {\r\n      var field = fields[j],\r\n          keys = Object.keys(otherMatchData.metadata[term][field])\r\n\r\n      if (this.metadata[term][field] == undefined) {\r\n        this.metadata[term][field] = Object.create(null)\r\n      }\r\n\r\n      for (var k = 0; k < keys.length; k++) {\r\n        var key = keys[k]\r\n\r\n        if (this.metadata[term][field][key] == undefined) {\r\n          this.metadata[term][field][key] = otherMatchData.metadata[term][field][key]\r\n        } else {\r\n          this.metadata[term][field][key] = this.metadata[term][field][key].concat(otherMatchData.metadata[term][field][key])\r\n        }\r\n\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Add metadata for a term/field pair to this instance of match data.\r\n *\r\n * @param {string} term - The term this match data is associated with\r\n * @param {string} field - The field in which the term was found\r\n * @param {object} metadata - The metadata recorded about this term in this field\r\n */\r\nlunr.MatchData.prototype.add = function (term, field, metadata) {\r\n  if (!(term in this.metadata)) {\r\n    this.metadata[term] = Object.create(null)\r\n    this.metadata[term][field] = metadata\r\n    return\r\n  }\r\n\r\n  if (!(field in this.metadata[term])) {\r\n    this.metadata[term][field] = metadata\r\n    return\r\n  }\r\n\r\n  var metadataKeys = Object.keys(metadata)\r\n\r\n  for (var i = 0; i < metadataKeys.length; i++) {\r\n    var key = metadataKeys[i]\r\n\r\n    if (key in this.metadata[term][field]) {\r\n      this.metadata[term][field][key] = this.metadata[term][field][key].concat(metadata[key])\r\n    } else {\r\n      this.metadata[term][field][key] = metadata[key]\r\n    }\r\n  }\r\n}\r\n/**\r\n * A lunr.Query provides a programmatic way of defining queries to be performed\r\n * against a {@link lunr.Index}.\r\n *\r\n * Prefer constructing a lunr.Query using the {@link lunr.Index#query} method\r\n * so the query object is pre-initialized with the right index fields.\r\n *\r\n * @constructor\r\n * @property {lunr.Query~Clause[]} clauses - An array of query clauses.\r\n * @property {string[]} allFields - An array of all available fields in a lunr.Index.\r\n */\r\nlunr.Query = function (allFields) {\r\n  this.clauses = []\r\n  this.allFields = allFields\r\n}\r\n\r\n/**\r\n * Constants for indicating what kind of automatic wildcard insertion will be used when constructing a query clause.\r\n *\r\n * This allows wildcards to be added to the beginning and end of a term without having to manually do any string\r\n * concatenation.\r\n *\r\n * The wildcard constants can be bitwise combined to select both leading and trailing wildcards.\r\n *\r\n * @constant\r\n * @default\r\n * @property {number} wildcard.NONE - The term will have no wildcards inserted, this is the default behaviour\r\n * @property {number} wildcard.LEADING - Prepend the term with a wildcard, unless a leading wildcard already exists\r\n * @property {number} wildcard.TRAILING - Append a wildcard to the term, unless a trailing wildcard already exists\r\n * @see lunr.Query~Clause\r\n * @see lunr.Query#clause\r\n * @see lunr.Query#term\r\n * @example <caption>query term with trailing wildcard</caption>\r\n * query.term('foo', { wildcard: lunr.Query.wildcard.TRAILING })\r\n * @example <caption>query term with leading and trailing wildcard</caption>\r\n * query.term('foo', {\r\n *   wildcard: lunr.Query.wildcard.LEADING | lunr.Query.wildcard.TRAILING\r\n * })\r\n */\r\n\r\nlunr.Query.wildcard = new String (\"*\")\r\nlunr.Query.wildcard.NONE = 0\r\nlunr.Query.wildcard.LEADING = 1\r\nlunr.Query.wildcard.TRAILING = 2\r\n\r\n/**\r\n * Constants for indicating what kind of presence a term must have in matching documents.\r\n *\r\n * @constant\r\n * @enum {number}\r\n * @see lunr.Query~Clause\r\n * @see lunr.Query#clause\r\n * @see lunr.Query#term\r\n * @example <caption>query term with required presence</caption>\r\n * query.term('foo', { presence: lunr.Query.presence.REQUIRED })\r\n */\r\nlunr.Query.presence = {\r\n  /**\r\n   * Term's presence in a document is optional, this is the default value.\r\n   */\r\n  OPTIONAL: 1,\r\n\r\n  /**\r\n   * Term's presence in a document is required, documents that do not contain\r\n   * this term will not be returned.\r\n   */\r\n  REQUIRED: 2,\r\n\r\n  /**\r\n   * Term's presence in a document is prohibited, documents that do contain\r\n   * this term will not be returned.\r\n   */\r\n  PROHIBITED: 3\r\n}\r\n\r\n/**\r\n * A single clause in a {@link lunr.Query} contains a term and details on how to\r\n * match that term against a {@link lunr.Index}.\r\n *\r\n * @typedef {Object} lunr.Query~Clause\r\n * @property {string[]} fields - The fields in an index this clause should be matched against.\r\n * @property {number} [boost=1] - Any boost that should be applied when matching this clause.\r\n * @property {number} [editDistance] - Whether the term should have fuzzy matching applied, and how fuzzy the match should be.\r\n * @property {boolean} [usePipeline] - Whether the term should be passed through the search pipeline.\r\n * @property {number} [wildcard=lunr.Query.wildcard.NONE] - Whether the term should have wildcards appended or prepended.\r\n * @property {number} [presence=lunr.Query.presence.OPTIONAL] - The terms presence in any matching documents.\r\n */\r\n\r\n/**\r\n * Adds a {@link lunr.Query~Clause} to this query.\r\n *\r\n * Unless the clause contains the fields to be matched all fields will be matched. In addition\r\n * a default boost of 1 is applied to the clause.\r\n *\r\n * @param {lunr.Query~Clause} clause - The clause to add to this query.\r\n * @see lunr.Query~Clause\r\n * @returns {lunr.Query}\r\n */\r\nlunr.Query.prototype.clause = function (clause) {\r\n  if (!('fields' in clause)) {\r\n    clause.fields = this.allFields\r\n  }\r\n\r\n  if (!('boost' in clause)) {\r\n    clause.boost = 1\r\n  }\r\n\r\n  if (!('usePipeline' in clause)) {\r\n    clause.usePipeline = true\r\n  }\r\n\r\n  if (!('wildcard' in clause)) {\r\n    clause.wildcard = lunr.Query.wildcard.NONE\r\n  }\r\n\r\n  if ((clause.wildcard & lunr.Query.wildcard.LEADING) && (clause.term.charAt(0) != lunr.Query.wildcard)) {\r\n    clause.term = \"*\" + clause.term\r\n  }\r\n\r\n  if ((clause.wildcard & lunr.Query.wildcard.TRAILING) && (clause.term.slice(-1) != lunr.Query.wildcard)) {\r\n    clause.term = \"\" + clause.term + \"*\"\r\n  }\r\n\r\n  if (!('presence' in clause)) {\r\n    clause.presence = lunr.Query.presence.OPTIONAL\r\n  }\r\n\r\n  this.clauses.push(clause)\r\n\r\n  return this\r\n}\r\n\r\n/**\r\n * A negated query is one in which every clause has a presence of\r\n * prohibited. These queries require some special processing to return\r\n * the expected results.\r\n *\r\n * @returns boolean\r\n */\r\nlunr.Query.prototype.isNegated = function () {\r\n  for (var i = 0; i < this.clauses.length; i++) {\r\n    if (this.clauses[i].presence != lunr.Query.presence.PROHIBITED) {\r\n      return false\r\n    }\r\n  }\r\n\r\n  return true\r\n}\r\n\r\n/**\r\n * Adds a term to the current query, under the covers this will create a {@link lunr.Query~Clause}\r\n * to the list of clauses that make up this query.\r\n *\r\n * The term is used as is, i.e. no tokenization will be performed by this method. Instead conversion\r\n * to a token or token-like string should be done before calling this method.\r\n *\r\n * The term will be converted to a string by calling `toString`. Multiple terms can be passed as an\r\n * array, each term in the array will share the same options.\r\n *\r\n * @param {object|object[]} term - The term(s) to add to the query.\r\n * @param {object} [options] - Any additional properties to add to the query clause.\r\n * @returns {lunr.Query}\r\n * @see lunr.Query#clause\r\n * @see lunr.Query~Clause\r\n * @example <caption>adding a single term to a query</caption>\r\n * query.term(\"foo\")\r\n * @example <caption>adding a single term to a query and specifying search fields, term boost and automatic trailing wildcard</caption>\r\n * query.term(\"foo\", {\r\n *   fields: [\"title\"],\r\n *   boost: 10,\r\n *   wildcard: lunr.Query.wildcard.TRAILING\r\n * })\r\n * @example <caption>using lunr.tokenizer to convert a string to tokens before using them as terms</caption>\r\n * query.term(lunr.tokenizer(\"foo bar\"))\r\n */\r\nlunr.Query.prototype.term = function (term, options) {\r\n  if (Array.isArray(term)) {\r\n    term.forEach(function (t) { this.term(t, lunr.utils.clone(options)) }, this)\r\n    return this\r\n  }\r\n\r\n  var clause = options || {}\r\n  clause.term = term.toString()\r\n\r\n  this.clause(clause)\r\n\r\n  return this\r\n}\r\nlunr.QueryParseError = function (message, start, end) {\r\n  this.name = \"QueryParseError\"\r\n  this.message = message\r\n  this.start = start\r\n  this.end = end\r\n}\r\n\r\nlunr.QueryParseError.prototype = new Error\r\nlunr.QueryLexer = function (str) {\r\n  this.lexemes = []\r\n  this.str = str\r\n  this.length = str.length\r\n  this.pos = 0\r\n  this.start = 0\r\n  this.escapeCharPositions = []\r\n}\r\n\r\nlunr.QueryLexer.prototype.run = function () {\r\n  var state = lunr.QueryLexer.lexText\r\n\r\n  while (state) {\r\n    state = state(this)\r\n  }\r\n}\r\n\r\nlunr.QueryLexer.prototype.sliceString = function () {\r\n  var subSlices = [],\r\n      sliceStart = this.start,\r\n      sliceEnd = this.pos\r\n\r\n  for (var i = 0; i < this.escapeCharPositions.length; i++) {\r\n    sliceEnd = this.escapeCharPositions[i]\r\n    subSlices.push(this.str.slice(sliceStart, sliceEnd))\r\n    sliceStart = sliceEnd + 1\r\n  }\r\n\r\n  subSlices.push(this.str.slice(sliceStart, this.pos))\r\n  this.escapeCharPositions.length = 0\r\n\r\n  return subSlices.join('')\r\n}\r\n\r\nlunr.QueryLexer.prototype.emit = function (type) {\r\n  this.lexemes.push({\r\n    type: type,\r\n    str: this.sliceString(),\r\n    start: this.start,\r\n    end: this.pos\r\n  })\r\n\r\n  this.start = this.pos\r\n}\r\n\r\nlunr.QueryLexer.prototype.escapeCharacter = function () {\r\n  this.escapeCharPositions.push(this.pos - 1)\r\n  this.pos += 1\r\n}\r\n\r\nlunr.QueryLexer.prototype.next = function () {\r\n  if (this.pos >= this.length) {\r\n    return lunr.QueryLexer.EOS\r\n  }\r\n\r\n  var char = this.str.charAt(this.pos)\r\n  this.pos += 1\r\n  return char\r\n}\r\n\r\nlunr.QueryLexer.prototype.width = function () {\r\n  return this.pos - this.start\r\n}\r\n\r\nlunr.QueryLexer.prototype.ignore = function () {\r\n  if (this.start == this.pos) {\r\n    this.pos += 1\r\n  }\r\n\r\n  this.start = this.pos\r\n}\r\n\r\nlunr.QueryLexer.prototype.backup = function () {\r\n  this.pos -= 1\r\n}\r\n\r\nlunr.QueryLexer.prototype.acceptDigitRun = function () {\r\n  var char, charCode\r\n\r\n  do {\r\n    char = this.next()\r\n    charCode = char.charCodeAt(0)\r\n  } while (charCode > 47 && charCode < 58)\r\n\r\n  if (char != lunr.QueryLexer.EOS) {\r\n    this.backup()\r\n  }\r\n}\r\n\r\nlunr.QueryLexer.prototype.more = function () {\r\n  return this.pos < this.length\r\n}\r\n\r\nlunr.QueryLexer.EOS = 'EOS'\r\nlunr.QueryLexer.FIELD = 'FIELD'\r\nlunr.QueryLexer.TERM = 'TERM'\r\nlunr.QueryLexer.EDIT_DISTANCE = 'EDIT_DISTANCE'\r\nlunr.QueryLexer.BOOST = 'BOOST'\r\nlunr.QueryLexer.PRESENCE = 'PRESENCE'\r\n\r\nlunr.QueryLexer.lexField = function (lexer) {\r\n  lexer.backup()\r\n  lexer.emit(lunr.QueryLexer.FIELD)\r\n  lexer.ignore()\r\n  return lunr.QueryLexer.lexText\r\n}\r\n\r\nlunr.QueryLexer.lexTerm = function (lexer) {\r\n  if (lexer.width() > 1) {\r\n    lexer.backup()\r\n    lexer.emit(lunr.QueryLexer.TERM)\r\n  }\r\n\r\n  lexer.ignore()\r\n\r\n  if (lexer.more()) {\r\n    return lunr.QueryLexer.lexText\r\n  }\r\n}\r\n\r\nlunr.QueryLexer.lexEditDistance = function (lexer) {\r\n  lexer.ignore()\r\n  lexer.acceptDigitRun()\r\n  lexer.emit(lunr.QueryLexer.EDIT_DISTANCE)\r\n  return lunr.QueryLexer.lexText\r\n}\r\n\r\nlunr.QueryLexer.lexBoost = function (lexer) {\r\n  lexer.ignore()\r\n  lexer.acceptDigitRun()\r\n  lexer.emit(lunr.QueryLexer.BOOST)\r\n  return lunr.QueryLexer.lexText\r\n}\r\n\r\nlunr.QueryLexer.lexEOS = function (lexer) {\r\n  if (lexer.width() > 0) {\r\n    lexer.emit(lunr.QueryLexer.TERM)\r\n  }\r\n}\r\n\r\n// This matches the separator used when tokenising fields\r\n// within a document. These should match otherwise it is\r\n// not possible to search for some tokens within a document.\r\n//\r\n// It is possible for the user to change the separator on the\r\n// tokenizer so it _might_ clash with any other of the special\r\n// characters already used within the search string, e.g. :.\r\n//\r\n// This means that it is possible to change the separator in\r\n// such a way that makes some words unsearchable using a search\r\n// string.\r\nlunr.QueryLexer.termSeparator = lunr.tokenizer.separator\r\n\r\nlunr.QueryLexer.lexText = function (lexer) {\r\n  while (true) {\r\n    var char = lexer.next()\r\n\r\n    if (char == lunr.QueryLexer.EOS) {\r\n      return lunr.QueryLexer.lexEOS\r\n    }\r\n\r\n    // Escape character is '\\'\r\n    if (char.charCodeAt(0) == 92) {\r\n      lexer.escapeCharacter()\r\n      continue\r\n    }\r\n\r\n    if (char == \":\") {\r\n      return lunr.QueryLexer.lexField\r\n    }\r\n\r\n    if (char == \"~\") {\r\n      lexer.backup()\r\n      if (lexer.width() > 0) {\r\n        lexer.emit(lunr.QueryLexer.TERM)\r\n      }\r\n      return lunr.QueryLexer.lexEditDistance\r\n    }\r\n\r\n    if (char == \"^\") {\r\n      lexer.backup()\r\n      if (lexer.width() > 0) {\r\n        lexer.emit(lunr.QueryLexer.TERM)\r\n      }\r\n      return lunr.QueryLexer.lexBoost\r\n    }\r\n\r\n    // \"+\" indicates term presence is required\r\n    // checking for length to ensure that only\r\n    // leading \"+\" are considered\r\n    if (char == \"+\" && lexer.width() === 1) {\r\n      lexer.emit(lunr.QueryLexer.PRESENCE)\r\n      return lunr.QueryLexer.lexText\r\n    }\r\n\r\n    // \"-\" indicates term presence is prohibited\r\n    // checking for length to ensure that only\r\n    // leading \"-\" are considered\r\n    if (char == \"-\" && lexer.width() === 1) {\r\n      lexer.emit(lunr.QueryLexer.PRESENCE)\r\n      return lunr.QueryLexer.lexText\r\n    }\r\n\r\n    if (char.match(lunr.QueryLexer.termSeparator)) {\r\n      return lunr.QueryLexer.lexTerm\r\n    }\r\n  }\r\n}\r\n\r\nlunr.QueryParser = function (str, query) {\r\n  this.lexer = new lunr.QueryLexer (str)\r\n  this.query = query\r\n  this.currentClause = {}\r\n  this.lexemeIdx = 0\r\n}\r\n\r\nlunr.QueryParser.prototype.parse = function () {\r\n  this.lexer.run()\r\n  this.lexemes = this.lexer.lexemes\r\n\r\n  var state = lunr.QueryParser.parseClause\r\n\r\n  while (state) {\r\n    state = state(this)\r\n  }\r\n\r\n  return this.query\r\n}\r\n\r\nlunr.QueryParser.prototype.peekLexeme = function () {\r\n  return this.lexemes[this.lexemeIdx]\r\n}\r\n\r\nlunr.QueryParser.prototype.consumeLexeme = function () {\r\n  var lexeme = this.peekLexeme()\r\n  this.lexemeIdx += 1\r\n  return lexeme\r\n}\r\n\r\nlunr.QueryParser.prototype.nextClause = function () {\r\n  var completedClause = this.currentClause\r\n  this.query.clause(completedClause)\r\n  this.currentClause = {}\r\n}\r\n\r\nlunr.QueryParser.parseClause = function (parser) {\r\n  var lexeme = parser.peekLexeme()\r\n\r\n  if (lexeme == undefined) {\r\n    return\r\n  }\r\n\r\n  switch (lexeme.type) {\r\n    case lunr.QueryLexer.PRESENCE:\r\n      return lunr.QueryParser.parsePresence\r\n    case lunr.QueryLexer.FIELD:\r\n      return lunr.QueryParser.parseField\r\n    case lunr.QueryLexer.TERM:\r\n      return lunr.QueryParser.parseTerm\r\n    default:\r\n      var errorMessage = \"expected either a field or a term, found \" + lexeme.type\r\n\r\n      if (lexeme.str.length >= 1) {\r\n        errorMessage += \" with value '\" + lexeme.str + \"'\"\r\n      }\r\n\r\n      throw new lunr.QueryParseError (errorMessage, lexeme.start, lexeme.end)\r\n  }\r\n}\r\n\r\nlunr.QueryParser.parsePresence = function (parser) {\r\n  var lexeme = parser.consumeLexeme()\r\n\r\n  if (lexeme == undefined) {\r\n    return\r\n  }\r\n\r\n  switch (lexeme.str) {\r\n    case \"-\":\r\n      parser.currentClause.presence = lunr.Query.presence.PROHIBITED\r\n      break\r\n    case \"+\":\r\n      parser.currentClause.presence = lunr.Query.presence.REQUIRED\r\n      break\r\n    default:\r\n      var errorMessage = \"unrecognised presence operator'\" + lexeme.str + \"'\"\r\n      throw new lunr.QueryParseError (errorMessage, lexeme.start, lexeme.end)\r\n  }\r\n\r\n  var nextLexeme = parser.peekLexeme()\r\n\r\n  if (nextLexeme == undefined) {\r\n    var errorMessage = \"expecting term or field, found nothing\"\r\n    throw new lunr.QueryParseError (errorMessage, lexeme.start, lexeme.end)\r\n  }\r\n\r\n  switch (nextLexeme.type) {\r\n    case lunr.QueryLexer.FIELD:\r\n      return lunr.QueryParser.parseField\r\n    case lunr.QueryLexer.TERM:\r\n      return lunr.QueryParser.parseTerm\r\n    default:\r\n      var errorMessage = \"expecting term or field, found '\" + nextLexeme.type + \"'\"\r\n      throw new lunr.QueryParseError (errorMessage, nextLexeme.start, nextLexeme.end)\r\n  }\r\n}\r\n\r\nlunr.QueryParser.parseField = function (parser) {\r\n  var lexeme = parser.consumeLexeme()\r\n\r\n  if (lexeme == undefined) {\r\n    return\r\n  }\r\n\r\n  if (parser.query.allFields.indexOf(lexeme.str) == -1) {\r\n    var possibleFields = parser.query.allFields.map(function (f) { return \"'\" + f + \"'\" }).join(', '),\r\n        errorMessage = \"unrecognised field '\" + lexeme.str + \"', possible fields: \" + possibleFields\r\n\r\n    throw new lunr.QueryParseError (errorMessage, lexeme.start, lexeme.end)\r\n  }\r\n\r\n  parser.currentClause.fields = [lexeme.str]\r\n\r\n  var nextLexeme = parser.peekLexeme()\r\n\r\n  if (nextLexeme == undefined) {\r\n    var errorMessage = \"expecting term, found nothing\"\r\n    throw new lunr.QueryParseError (errorMessage, lexeme.start, lexeme.end)\r\n  }\r\n\r\n  switch (nextLexeme.type) {\r\n    case lunr.QueryLexer.TERM:\r\n      return lunr.QueryParser.parseTerm\r\n    default:\r\n      var errorMessage = \"expecting term, found '\" + nextLexeme.type + \"'\"\r\n      throw new lunr.QueryParseError (errorMessage, nextLexeme.start, nextLexeme.end)\r\n  }\r\n}\r\n\r\nlunr.QueryParser.parseTerm = function (parser) {\r\n  var lexeme = parser.consumeLexeme()\r\n\r\n  if (lexeme == undefined) {\r\n    return\r\n  }\r\n\r\n  parser.currentClause.term = lexeme.str.toLowerCase()\r\n\r\n  if (lexeme.str.indexOf(\"*\") != -1) {\r\n    parser.currentClause.usePipeline = false\r\n  }\r\n\r\n  var nextLexeme = parser.peekLexeme()\r\n\r\n  if (nextLexeme == undefined) {\r\n    parser.nextClause()\r\n    return\r\n  }\r\n\r\n  switch (nextLexeme.type) {\r\n    case lunr.QueryLexer.TERM:\r\n      parser.nextClause()\r\n      return lunr.QueryParser.parseTerm\r\n    case lunr.QueryLexer.FIELD:\r\n      parser.nextClause()\r\n      return lunr.QueryParser.parseField\r\n    case lunr.QueryLexer.EDIT_DISTANCE:\r\n      return lunr.QueryParser.parseEditDistance\r\n    case lunr.QueryLexer.BOOST:\r\n      return lunr.QueryParser.parseBoost\r\n    case lunr.QueryLexer.PRESENCE:\r\n      parser.nextClause()\r\n      return lunr.QueryParser.parsePresence\r\n    default:\r\n      var errorMessage = \"Unexpected lexeme type '\" + nextLexeme.type + \"'\"\r\n      throw new lunr.QueryParseError (errorMessage, nextLexeme.start, nextLexeme.end)\r\n  }\r\n}\r\n\r\nlunr.QueryParser.parseEditDistance = function (parser) {\r\n  var lexeme = parser.consumeLexeme()\r\n\r\n  if (lexeme == undefined) {\r\n    return\r\n  }\r\n\r\n  var editDistance = parseInt(lexeme.str, 10)\r\n\r\n  if (isNaN(editDistance)) {\r\n    var errorMessage = \"edit distance must be numeric\"\r\n    throw new lunr.QueryParseError (errorMessage, lexeme.start, lexeme.end)\r\n  }\r\n\r\n  parser.currentClause.editDistance = editDistance\r\n\r\n  var nextLexeme = parser.peekLexeme()\r\n\r\n  if (nextLexeme == undefined) {\r\n    parser.nextClause()\r\n    return\r\n  }\r\n\r\n  switch (nextLexeme.type) {\r\n    case lunr.QueryLexer.TERM:\r\n      parser.nextClause()\r\n      return lunr.QueryParser.parseTerm\r\n    case lunr.QueryLexer.FIELD:\r\n      parser.nextClause()\r\n      return lunr.QueryParser.parseField\r\n    case lunr.QueryLexer.EDIT_DISTANCE:\r\n      return lunr.QueryParser.parseEditDistance\r\n    case lunr.QueryLexer.BOOST:\r\n      return lunr.QueryParser.parseBoost\r\n    case lunr.QueryLexer.PRESENCE:\r\n      parser.nextClause()\r\n      return lunr.QueryParser.parsePresence\r\n    default:\r\n      var errorMessage = \"Unexpected lexeme type '\" + nextLexeme.type + \"'\"\r\n      throw new lunr.QueryParseError (errorMessage, nextLexeme.start, nextLexeme.end)\r\n  }\r\n}\r\n\r\nlunr.QueryParser.parseBoost = function (parser) {\r\n  var lexeme = parser.consumeLexeme()\r\n\r\n  if (lexeme == undefined) {\r\n    return\r\n  }\r\n\r\n  var boost = parseInt(lexeme.str, 10)\r\n\r\n  if (isNaN(boost)) {\r\n    var errorMessage = \"boost must be numeric\"\r\n    throw new lunr.QueryParseError (errorMessage, lexeme.start, lexeme.end)\r\n  }\r\n\r\n  parser.currentClause.boost = boost\r\n\r\n  var nextLexeme = parser.peekLexeme()\r\n\r\n  if (nextLexeme == undefined) {\r\n    parser.nextClause()\r\n    return\r\n  }\r\n\r\n  switch (nextLexeme.type) {\r\n    case lunr.QueryLexer.TERM:\r\n      parser.nextClause()\r\n      return lunr.QueryParser.parseTerm\r\n    case lunr.QueryLexer.FIELD:\r\n      parser.nextClause()\r\n      return lunr.QueryParser.parseField\r\n    case lunr.QueryLexer.EDIT_DISTANCE:\r\n      return lunr.QueryParser.parseEditDistance\r\n    case lunr.QueryLexer.BOOST:\r\n      return lunr.QueryParser.parseBoost\r\n    case lunr.QueryLexer.PRESENCE:\r\n      parser.nextClause()\r\n      return lunr.QueryParser.parsePresence\r\n    default:\r\n      var errorMessage = \"Unexpected lexeme type '\" + nextLexeme.type + \"'\"\r\n      throw new lunr.QueryParseError (errorMessage, nextLexeme.start, nextLexeme.end)\r\n  }\r\n}\r\n\r\n  /**\r\n   * export the module via AMD, CommonJS or as a browser global\r\n   * Export code from https://github.com/umdjs/umd/blob/master/returnExports.js\r\n   */\r\n  ;(function (root, factory) {\r\n    if (typeof define === 'function' && define.amd) {\r\n      // AMD. Register as an anonymous module.\r\n      define(factory)\r\n    } else if (typeof exports === 'object') {\r\n      /**\r\n       * Node. Does not work with strict CommonJS, but\r\n       * only CommonJS-like enviroments that support module.exports,\r\n       * like Node.\r\n       */\r\n      module.exports = factory()\r\n    } else {\r\n      // Browser globals (root is window)\r\n      root.lunr = factory()\r\n    }\r\n  }(this, function () {\r\n    /**\r\n     * Just return a value to define the module export.\r\n     * This example returns an object, but the module\r\n     * can return a function as the exported value.\r\n     */\r\n    return lunr\r\n  }))\r\n})();\r\n"],
  "mappings": "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",
  "names": ["porterStemmer"]
}
